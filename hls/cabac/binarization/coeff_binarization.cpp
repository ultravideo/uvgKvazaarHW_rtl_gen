/*****************************************************************************
 * This file is part of uvgKvazaarHW.
 *
 * Copyright (c) 2025, Tampere University, ITU/ISO/IEC, project contributors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * * Neither the name of the Tampere University or ITU/ISO/IEC nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * INCLUDING NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS
 ****************************************************************************/

#include "cabac.h"

#define NO_PRINT

#define MAX_DEPTH 3
#define MIN_SIZE 3
#define LCU_WIDTH 64
#define TR_MIN_LOG2_SIZE 2

#define LCU_LUMA_SIZE (LCU_WIDTH * LCU_WIDTH)
#define LCU_CHROMA_SIZE (LCU_WIDTH * LCU_WIDTH >> 2)

#define LCU_WIDTH_C (LCU_WIDTH / 2)

#define SUB_SCU(xy) ((xy) & (LCU_WIDTH - 1))

#define LCU_CU_WIDTH 16
#define LCU_T_CU_WIDTH (LCU_CU_WIDTH + 1)
#define LCU_CU_OFFSET (LCU_T_CU_WIDTH + 1)
#define SCU_WIDTH (LCU_WIDTH / LCU_CU_WIDTH)

#define MAX_PU_DEPTH 4

#define SWAP(a, b, swaptype)                                                                                                                                                                           \
  {                                                                                                                                                                                                    \
    swaptype tempval;                                                                                                                                                                                  \
    tempval = a;                                                                                                                                                                                       \
    a = b;                                                                                                                                                                                             \
    b = tempval;                                                                                                                                                                                       \
  }

#define MAX(a, b) (((a) > (b)) ? (a) : (b))
#define MIN(a, b) (((a) < (b)) ? (a) : (b))

#define ABS(a) ((a) >= 0 ? (a) : (-a))

#define CEILDIV(x, y) (((x) + (y) - 1) / (y))

#define PU_GET_X(part_mode, cu_width, cu_x, i) ((cu_x) + kvz_part_mode_offsets[(part_mode)][(i)][0] * (cu_width) / 4)

#define PU_GET_Y(part_mode, cu_width, cu_y, i) ((cu_y) + kvz_part_mode_offsets[(part_mode)][(i)][1] * (cu_width) / 4)

#define GET_SPLITDATA(CU, curDepth) (cu_get_depth((CU)) > curDepth)

#define LCU_GET_CU_AT_PX(cu, x_px, y_px) (&(cu)[LCU_CU_OFFSET + ((x_px) >> 2) + ((y_px) >> 2) * LCU_T_CU_WIDTH])

#define LCU_GET_CU_AT_PX_16x16(cu, x_px, y_px) ((cu)[((x_px) >> 2) + ((y_px) >> 2) * LCU_CU_WIDTH])

#define LCU_GET_CU_TOP_AT_PX(cu, x_px) ((cu)[(x_px) >> 2])

#define LCU_GET_CU_LEFT_AT_PX(cu, y_px) ((cu)[(y_px) >> 2])

#define NUM_CBF_DEPTHS 5

#define C1FLAG_NUMBER 8 // maximum number of largerThan1 flag coded in one chunk
#define C2FLAG_NUMBER 1 // maximum number of largerThan2 flag coded in one chunk

typedef enum {
  CU_NOTSET = 0,
  CU_INTRA = 1,
  CU_INTER = 2,
  CU_PCM = 3,
} cu_type_t;

typedef struct {
  coeff_t y[LCU_LUMA_SIZE];
  coeff_t u[LCU_CHROMA_SIZE];
  coeff_t v[LCU_CHROMA_SIZE];
} lcu_coeff_t;

typedef struct {
  uint_8 type;      //      : 2; //!< \brief block type, one of cu_type_t values
  uint_8 depth;     //     : 3; //!< \brief depth / size of this block
  uint_8 part_size; // : 3; //!< \brief partition mode, one of part_mode_t values
  uint_8 tr_depth;  //  : 3; //!< \brief transform depth
  uint_8 skipped;   //   : 1; //!< \brief flag to indicate this block is skipped
  uint_8 merged;    //    : 1; //!< \brief flag to indicate this block is merged
  uint_8 merge_idx; // : 3; //!< \brief merge index
  uint_16 cbf;
  int_8 tr_skip;

  /**
   * \brief QP used for the CU.
   *
   * This is required for deblocking when per-LCU QPs are enabled.
   */
  uint_8 qp;

  struct {
    int_8 mode;
    int_8 mode_chroma;
  } intra;
} cu_info_t;

typedef struct cu_array_t {
  struct cu_array_t *base; //!< \brief base cu array or NULL
  cu_info_t *data;         //!< \brief cu array
  int_32 width;            //!< \brief width of the array in pixels
  int_32 height;           //!< \brief height of the array in pixels
  int_32 stride;           //!< \brief stride of the array in pixels
  int_32 refcount;         //!< \brief number of references to this cu_array
} cu_array_t;

typedef struct videoframe {
  int_32 width;         //!< \brief Luma pixel array width.
  int_32 height;        //!< \brief Luma pixel array height.
  int_32 height_in_lcu; //!< \brief Picture width in number of LCU's.
  int_32 width_in_lcu;  //!< \brief Picture height in number of LCU's.

  cu_array_t *cu_array; //!< \brief Info for each CU at each depth.
} videoframe_t;

#define SCAN_DIAG 0
#define SCAN_HOR 1
#define SCAN_VER 2

uint_8 kvz_part_mode_offsets[][4][2] = {
    {{0, 0}},                         // 2Nx2N
    {{0, 0}, {0, 2}},                 // 2NxN
    {{0, 0}, {2, 0}},                 // Nx2N
    {{0, 0}, {2, 0}, {0, 2}, {2, 2}}, // NxN
    {{0, 0}, {0, 1}},                 // 2NxnU
    {{0, 0}, {0, 3}},                 // 2NxnD
    {{0, 0}, {1, 0}},                 // nLx2N
    {{0, 0}, {3, 0}},                 // nRx2N
};

template < int width > ac_int< width - 1, false > Abs(ac_int< width, true > a) {
  ac_int< width, false > tmp0 = a, tmp1 = 0;

#pragma hls_unroll yes
  for (int i = 0; i < width; i++)
    tmp1[i] = tmp0[i] ^ tmp0[width - 1];

  return tmp1 + tmp0[width - 1];
}

static uint_16 cbf_masks[NUM_CBF_DEPTHS] = {0x1f, 0x0f, 0x07, 0x03, 0x1};

static ac_int< 6, false > g_group_idx[32] = {0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9};

static uint_8 g_min_in_group[10] = {0, 1, 2, 3, 4, 6, 8, 12, 16, 24};

ac_int< 3, true > kvz_g_convert_to_bit[LCU_WIDTH + 1] = {-1, -1, -1, -1, 0,  -1, -1, -1, 1,  -1, -1, -1, -1, -1, -1, -1, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3,
                                                         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};

static ac_int< 12, false > kvz_g_sig_last_scan_idx[3][5] = {{0, 12, 60, 252, 1020}, {4, 28, 124, 508, 2044}, {8, 44, 188, 764, 3068}};

static ac_int< 7, false > g_sig_last_scan_cg[88] = {0,  2,  1,  3,  0,  1,  2,  3,

                                                    0,  4,  1,  8,  5,  2,  12, 9,  6,  3,  13, 10, 7,  14, 11, 15,

                                                    0,  8,  1,  16, 9,  2,  24, 17, 10, 3,  32, 25, 18, 11, 4,  40, 33, 26, 19, 12, 5,  48, 41, 34, 27, 20, 13, 6,  56, 49, 42, 35,
                                                    28, 21, 14, 7,  57, 50, 43, 36, 29, 22, 15, 58, 51, 44, 37, 30, 23, 59, 52, 45, 38, 31, 60, 53, 46, 39, 61, 54, 47, 62, 55, 63};

static ac_int< 6, false > g_sig_last_scan_cg_idx[4][3] = {{0, 4, 0}, // 4x4, only first element is used
                                                          {0, 4, 0},
                                                          {8, 0, 0},
                                                          {24, 0, 0}};

static ac_int< 7, false > g_sig_last_scan_cg2[88] = {

    0,  2,  1,  3,  0,  1,  2,  3,

    0,  2,  5,  9,  1,  4,  8,  12, 3,  7,  11, 14, 6,  10, 13, 15,

    0,  2,  5,  9,  14, 20, 27, 35, 1,  4,  8,  13, 19, 26, 34, 42, 3,  7,  12, 18, 25, 33, 41, 48, 6,  11, 17, 24, 32, 40, 47, 53,
    10, 16, 23, 31, 39, 46, 52, 57, 15, 22, 30, 38, 45, 51, 56, 60, 21, 29, 37, 44, 50, 55, 59, 62, 28, 36, 43, 49, 54, 58, 61, 63,
};

static ac_int< 6, false > g_sig_last_scan_cg2_idx[4][3] = {{0, 4, 0}, // 4x4, only first element is used
                                                           {0, 4, 0},
                                                           {8, 0, 0},
                                                           {24, 0, 0}};

static ac_int< 5, false > kvz_g_sig_last_scan4[3 * 16] = {0, 4, 1,  8,  5,  2,  12, 9,  6, 3, 13, 10, 7, 14, 11, 15, 0, 1, 2,  3,  4, 5, 6,  7,
                                                          8, 9, 10, 11, 12, 13, 14, 15, 0, 4, 8,  12, 1, 5,  9,  13, 2, 6, 10, 14, 3, 7, 11, 15};

static ac_int< 10, false > kvz_g_sig_last_scan[4092] = {
    0,   2,   1,   3,   0,   1,   2,    3,   0,   2,   1,    3,

    0,   4,   1,   8,   5,   2,   12,   9,   6,   3,   13,   10,  7,    14,   11,   15,   0,   1,   2,   3,    4,   5,   6,    7,    8,   9,   10,   11,   12,   13,   14,   15,
    0,   4,   8,   12,  1,   5,   9,    13,  2,   6,   10,   14,  3,    7,    11,   15,

    0,   8,   1,   16,  9,   2,   24,   17,  10,  3,   25,   18,  11,   26,   19,   27,   32,  40,  33,  48,   41,  34,  56,   49,   42,  35,  57,   50,   43,   58,   51,   59,
    4,   12,  5,   20,  13,  6,   28,   21,  14,  7,   29,   22,  15,   30,   23,   31,   36,  44,  37,  52,   45,  38,  60,   53,   46,  39,  61,   54,   47,   62,   55,   63,
    0,   1,   2,   3,   8,   9,   10,   11,  16,  17,  18,   19,  24,   25,   26,   27,   4,   5,   6,   7,    12,  13,  14,   15,   20,  21,  22,   23,   28,   29,   30,   31,
    32,  33,  34,  35,  40,  41,  42,   43,  48,  49,  50,   51,  56,   57,   58,   59,   36,  37,  38,  39,   44,  45,  46,   47,   52,  53,  54,   55,   60,   61,   62,   63,
    0,   8,   16,  24,  1,   9,   17,   25,  2,   10,  18,   26,  3,    11,   19,   27,   32,  40,  48,  56,   33,  41,  49,   57,   34,  42,  50,   58,   35,   43,   51,   59,
    4,   12,  20,  28,  5,   13,  21,   29,  6,   14,  22,   30,  7,    15,   23,   31,   36,  44,  52,  60,   37,  45,  53,   61,   38,  46,  54,   62,   39,   47,   55,   63,

    0,   16,  1,   32,  17,  2,   48,   33,  18,  3,   49,   34,  19,   50,   35,   51,   64,  80,  65,  96,   81,  66,  112,  97,   82,  67,  113,  98,   83,   114,  99,   115,
    4,   20,  5,   36,  21,  6,   52,   37,  22,  7,   53,   38,  23,   54,   39,   55,   128, 144, 129, 160,  145, 130, 176,  161,  146, 131, 177,  162,  147,  178,  163,  179,
    68,  84,  69,  100, 85,  70,  116,  101, 86,  71,  117,  102, 87,   118,  103,  119,  8,   24,  9,   40,   25,  10,  56,   41,   26,  11,  57,   42,   27,   58,   43,   59,
    192, 208, 193, 224, 209, 194, 240,  225, 210, 195, 241,  226, 211,  242,  227,  243,  132, 148, 133, 164,  149, 134, 180,  165,  150, 135, 181,  166,  151,  182,  167,  183,
    72,  88,  73,  104, 89,  74,  120,  105, 90,  75,  121,  106, 91,   122,  107,  123,  12,  28,  13,  44,   29,  14,  60,   45,   30,  15,  61,   46,   31,   62,   47,   63,
    196, 212, 197, 228, 213, 198, 244,  229, 214, 199, 245,  230, 215,  246,  231,  247,  136, 152, 137, 168,  153, 138, 184,  169,  154, 139, 185,  170,  155,  186,  171,  187,
    76,  92,  77,  108, 93,  78,  124,  109, 94,  79,  125,  110, 95,   126,  111,  127,  200, 216, 201, 232,  217, 202, 248,  233,  218, 203, 249,  234,  219,  250,  235,  251,
    140, 156, 141, 172, 157, 142, 188,  173, 158, 143, 189,  174, 159,  190,  175,  191,  204, 220, 205, 236,  221, 206, 252,  237,  222, 207, 253,  238,  223,  254,  239,  255,

    0,   1,   2,   3,   16,  17,  18,   19,  32,  33,  34,   35,  48,   49,   50,   51,   4,   5,   6,   7,    20,  21,  22,   23,   36,  37,  38,   39,   52,   53,   54,   55,
    8,   9,   10,  11,  24,  25,  26,   27,  40,  41,  42,   43,  56,   57,   58,   59,   12,  13,  14,  15,   28,  29,  30,   31,   44,  45,  46,   47,   60,   61,   62,   63,
    64,  65,  66,  67,  80,  81,  82,   83,  96,  97,  98,   99,  112,  113,  114,  115,  68,  69,  70,  71,   84,  85,  86,   87,   100, 101, 102,  103,  116,  117,  118,  119,
    72,  73,  74,  75,  88,  89,  90,   91,  104, 105, 106,  107, 120,  121,  122,  123,  76,  77,  78,  79,   92,  93,  94,   95,   108, 109, 110,  111,  124,  125,  126,  127,
    128, 129, 130, 131, 144, 145, 146,  147, 160, 161, 162,  163, 176,  177,  178,  179,  132, 133, 134, 135,  148, 149, 150,  151,  164, 165, 166,  167,  180,  181,  182,  183,
    136, 137, 138, 139, 152, 153, 154,  155, 168, 169, 170,  171, 184,  185,  186,  187,  140, 141, 142, 143,  156, 157, 158,  159,  172, 173, 174,  175,  188,  189,  190,  191,
    192, 193, 194, 195, 208, 209, 210,  211, 224, 225, 226,  227, 240,  241,  242,  243,  196, 197, 198, 199,  212, 213, 214,  215,  228, 229, 230,  231,  244,  245,  246,  247,
    200, 201, 202, 203, 216, 217, 218,  219, 232, 233, 234,  235, 248,  249,  250,  251,  204, 205, 206, 207,  220, 221, 222,  223,  236, 237, 238,  239,  252,  253,  254,  255,

    0,   16,  32,  48,  1,   17,  33,   49,  2,   18,  34,   50,  3,    19,   35,   51,   64,  80,  96,  112,  65,  81,  97,   113,  66,  82,  98,   114,  67,   83,   99,   115,
    128, 144, 160, 176, 129, 145, 161,  177, 130, 146, 162,  178, 131,  147,  163,  179,  192, 208, 224, 240,  193, 209, 225,  241,  194, 210, 226,  242,  195,  211,  227,  243,
    4,   20,  36,  52,  5,   21,  37,   53,  6,   22,  38,   54,  7,    23,   39,   55,   68,  84,  100, 116,  69,  85,  101,  117,  70,  86,  102,  118,  71,   87,   103,  119,
    132, 148, 164, 180, 133, 149, 165,  181, 134, 150, 166,  182, 135,  151,  167,  183,  196, 212, 228, 244,  197, 213, 229,  245,  198, 214, 230,  246,  199,  215,  231,  247,
    8,   24,  40,  56,  9,   25,  41,   57,  10,  26,  42,   58,  11,   27,   43,   59,   72,  88,  104, 120,  73,  89,  105,  121,  74,  90,  106,  122,  75,   91,   107,  123,
    136, 152, 168, 184, 137, 153, 169,  185, 138, 154, 170,  186, 139,  155,  171,  187,  200, 216, 232, 248,  201, 217, 233,  249,  202, 218, 234,  250,  203,  219,  235,  251,
    12,  28,  44,  60,  13,  29,  45,   61,  14,  30,  46,   62,  15,   31,   47,   63,   76,  92,  108, 124,  77,  93,  109,  125,  78,  94,  110,  126,  79,   95,   111,  127,
    140, 156, 172, 188, 141, 157, 173,  189, 142, 158, 174,  190, 143,  159,  175,  191,  204, 220, 236, 252,  205, 221, 237,  253,  206, 222, 238,  254,  207,  223,  239,  255,

    0,   32,  1,   64,  33,  2,   96,   65,  34,  3,   97,   66,  35,   98,   67,   99,   128, 160, 129, 192,  161, 130, 224,  193,  162, 131, 225,  194,  163,  226,  195,  227,
    4,   36,  5,   68,  37,  6,   100,  69,  38,  7,   101,  70,  39,   102,  71,   103,  256, 288, 257, 320,  289, 258, 352,  321,  290, 259, 353,  322,  291,  354,  323,  355,
    132, 164, 133, 196, 165, 134, 228,  197, 166, 135, 229,  198, 167,  230,  199,  231,  8,   40,  9,   72,   41,  10,  104,  73,   42,  11,  105,  74,   43,   106,  75,   107,
    384, 416, 385, 448, 417, 386, 480,  449, 418, 387, 481,  450, 419,  482,  451,  483,  260, 292, 261, 324,  293, 262, 356,  325,  294, 263, 357,  326,  295,  358,  327,  359,
    136, 168, 137, 200, 169, 138, 232,  201, 170, 139, 233,  202, 171,  234,  203,  235,  12,  44,  13,  76,   45,  14,  108,  77,   46,  15,  109,  78,   47,   110,  79,   111,
    512, 544, 513, 576, 545, 514, 608,  577, 546, 515, 609,  578, 547,  610,  579,  611,  388, 420, 389, 452,  421, 390, 484,  453,  422, 391, 485,  454,  423,  486,  455,  487,
    264, 296, 265, 328, 297, 266, 360,  329, 298, 267, 361,  330, 299,  362,  331,  363,  140, 172, 141, 204,  173, 142, 236,  205,  174, 143, 237,  206,  175,  238,  207,  239,
    16,  48,  17,  80,  49,  18,  112,  81,  50,  19,  113,  82,  51,   114,  83,   115,  640, 672, 641, 704,  673, 642, 736,  705,  674, 643, 737,  706,  675,  738,  707,  739,
    516, 548, 517, 580, 549, 518, 612,  581, 550, 519, 613,  582, 551,  614,  583,  615,  392, 424, 393, 456,  425, 394, 488,  457,  426, 395, 489,  458,  427,  490,  459,  491,
    268, 300, 269, 332, 301, 270, 364,  333, 302, 271, 365,  334, 303,  366,  335,  367,  144, 176, 145, 208,  177, 146, 240,  209,  178, 147, 241,  210,  179,  242,  211,  243,
    20,  52,  21,  84,  53,  22,  116,  85,  54,  23,  117,  86,  55,   118,  87,   119,  768, 800, 769, 832,  801, 770, 864,  833,  802, 771, 865,  834,  803,  866,  835,  867,
    644, 676, 645, 708, 677, 646, 740,  709, 678, 647, 741,  710, 679,  742,  711,  743,  520, 552, 521, 584,  553, 522, 616,  585,  554, 523, 617,  586,  555,  618,  587,  619,
    396, 428, 397, 460, 429, 398, 492,  461, 430, 399, 493,  462, 431,  494,  463,  495,  272, 304, 273, 336,  305, 274, 368,  337,  306, 275, 369,  338,  307,  370,  339,  371,
    148, 180, 149, 212, 181, 150, 244,  213, 182, 151, 245,  214, 183,  246,  215,  247,  24,  56,  25,  88,   57,  26,  120,  89,   58,  27,  121,  90,   59,   122,  91,   123,
    896, 928, 897, 960, 929, 898, 992,  961, 930, 899, 993,  962, 931,  994,  963,  995,  772, 804, 773, 836,  805, 774, 868,  837,  806, 775, 869,  838,  807,  870,  839,  871,
    648, 680, 649, 712, 681, 650, 744,  713, 682, 651, 745,  714, 683,  746,  715,  747,  524, 556, 525, 588,  557, 526, 620,  589,  558, 527, 621,  590,  559,  622,  591,  623,
    400, 432, 401, 464, 433, 402, 496,  465, 434, 403, 497,  466, 435,  498,  467,  499,  276, 308, 277, 340,  309, 278, 372,  341,  310, 279, 373,  342,  311,  374,  343,  375,
    152, 184, 153, 216, 185, 154, 248,  217, 186, 155, 249,  218, 187,  250,  219,  251,  28,  60,  29,  92,   61,  30,  124,  93,   62,  31,  125,  94,   63,   126,  95,   127,
    900, 932, 901, 964, 933, 902, 996,  965, 934, 903, 997,  966, 935,  998,  967,  999,  776, 808, 777, 840,  809, 778, 872,  841,  810, 779, 873,  842,  811,  874,  843,  875,
    652, 684, 653, 716, 685, 654, 748,  717, 686, 655, 749,  718, 687,  750,  719,  751,  528, 560, 529, 592,  561, 530, 624,  593,  562, 531, 625,  594,  563,  626,  595,  627,
    404, 436, 405, 468, 437, 406, 500,  469, 438, 407, 501,  470, 439,  502,  471,  503,  280, 312, 281, 344,  313, 282, 376,  345,  314, 283, 377,  346,  315,  378,  347,  379,
    156, 188, 157, 220, 189, 158, 252,  221, 190, 159, 253,  222, 191,  254,  223,  255,  904, 936, 905, 968,  937, 906, 1000, 969,  938, 907, 1001, 970,  939,  1002, 971,  1003,
    780, 812, 781, 844, 813, 782, 876,  845, 814, 783, 877,  846, 815,  878,  847,  879,  656, 688, 657, 720,  689, 658, 752,  721,  690, 659, 753,  722,  691,  754,  723,  755,
    532, 564, 533, 596, 565, 534, 628,  597, 566, 535, 629,  598, 567,  630,  599,  631,  408, 440, 409, 472,  441, 410, 504,  473,  442, 411, 505,  474,  443,  506,  475,  507,
    284, 316, 285, 348, 317, 286, 380,  349, 318, 287, 381,  350, 319,  382,  351,  383,  908, 940, 909, 972,  941, 910, 1004, 973,  942, 911, 1005, 974,  943,  1006, 975,  1007,
    784, 816, 785, 848, 817, 786, 880,  849, 818, 787, 881,  850, 819,  882,  851,  883,  660, 692, 661, 724,  693, 662, 756,  725,  694, 663, 757,  726,  695,  758,  727,  759,
    536, 568, 537, 600, 569, 538, 632,  601, 570, 539, 633,  602, 571,  634,  603,  635,  412, 444, 413, 476,  445, 414, 508,  477,  446, 415, 509,  478,  447,  510,  479,  511,
    912, 944, 913, 976, 945, 914, 1008, 977, 946, 915, 1009, 978, 947,  1010, 979,  1011, 788, 820, 789, 852,  821, 790, 884,  853,  822, 791, 885,  854,  823,  886,  855,  887,
    664, 696, 665, 728, 697, 666, 760,  729, 698, 667, 761,  730, 699,  762,  731,  763,  540, 572, 541, 604,  573, 542, 636,  605,  574, 543, 637,  606,  575,  638,  607,  639,
    916, 948, 917, 980, 949, 918, 1012, 981, 950, 919, 1013, 982, 951,  1014, 983,  1015, 792, 824, 793, 856,  825, 794, 888,  857,  826, 795, 889,  858,  827,  890,  859,  891,
    668, 700, 669, 732, 701, 670, 764,  733, 702, 671, 765,  734, 703,  766,  735,  767,  920, 952, 921, 984,  953, 922, 1016, 985,  954, 923, 1017, 986,  955,  1018, 987,  1019,
    796, 828, 797, 860, 829, 798, 892,  861, 830, 799, 893,  862, 831,  894,  863,  895,  924, 956, 925, 988,  957, 926, 1020, 989,  958, 927, 1021, 990,  959,  1022, 991,  1023,

    0,   1,   2,   3,   32,  33,  34,   35,  64,  65,  66,   67,  96,   97,   98,   99,   4,   5,   6,   7,    36,  37,  38,   39,   68,  69,  70,   71,   100,  101,  102,  103,
    8,   9,   10,  11,  40,  41,  42,   43,  72,  73,  74,   75,  104,  105,  106,  107,  12,  13,  14,  15,   44,  45,  46,   47,   76,  77,  78,   79,   108,  109,  110,  111,
    16,  17,  18,  19,  48,  49,  50,   51,  80,  81,  82,   83,  112,  113,  114,  115,  20,  21,  22,  23,   52,  53,  54,   55,   84,  85,  86,   87,   116,  117,  118,  119,
    24,  25,  26,  27,  56,  57,  58,   59,  88,  89,  90,   91,  120,  121,  122,  123,  28,  29,  30,  31,   60,  61,  62,   63,   92,  93,  94,   95,   124,  125,  126,  127,
    128, 129, 130, 131, 160, 161, 162,  163, 192, 193, 194,  195, 224,  225,  226,  227,  132, 133, 134, 135,  164, 165, 166,  167,  196, 197, 198,  199,  228,  229,  230,  231,
    136, 137, 138, 139, 168, 169, 170,  171, 200, 201, 202,  203, 232,  233,  234,  235,  140, 141, 142, 143,  172, 173, 174,  175,  204, 205, 206,  207,  236,  237,  238,  239,
    144, 145, 146, 147, 176, 177, 178,  179, 208, 209, 210,  211, 240,  241,  242,  243,  148, 149, 150, 151,  180, 181, 182,  183,  212, 213, 214,  215,  244,  245,  246,  247,
    152, 153, 154, 155, 184, 185, 186,  187, 216, 217, 218,  219, 248,  249,  250,  251,  156, 157, 158, 159,  188, 189, 190,  191,  220, 221, 222,  223,  252,  253,  254,  255,
    256, 257, 258, 259, 288, 289, 290,  291, 320, 321, 322,  323, 352,  353,  354,  355,  260, 261, 262, 263,  292, 293, 294,  295,  324, 325, 326,  327,  356,  357,  358,  359,
    264, 265, 266, 267, 296, 297, 298,  299, 328, 329, 330,  331, 360,  361,  362,  363,  268, 269, 270, 271,  300, 301, 302,  303,  332, 333, 334,  335,  364,  365,  366,  367,
    272, 273, 274, 275, 304, 305, 306,  307, 336, 337, 338,  339, 368,  369,  370,  371,  276, 277, 278, 279,  308, 309, 310,  311,  340, 341, 342,  343,  372,  373,  374,  375,
    280, 281, 282, 283, 312, 313, 314,  315, 344, 345, 346,  347, 376,  377,  378,  379,  284, 285, 286, 287,  316, 317, 318,  319,  348, 349, 350,  351,  380,  381,  382,  383,
    384, 385, 386, 387, 416, 417, 418,  419, 448, 449, 450,  451, 480,  481,  482,  483,  388, 389, 390, 391,  420, 421, 422,  423,  452, 453, 454,  455,  484,  485,  486,  487,
    392, 393, 394, 395, 424, 425, 426,  427, 456, 457, 458,  459, 488,  489,  490,  491,  396, 397, 398, 399,  428, 429, 430,  431,  460, 461, 462,  463,  492,  493,  494,  495,
    400, 401, 402, 403, 432, 433, 434,  435, 464, 465, 466,  467, 496,  497,  498,  499,  404, 405, 406, 407,  436, 437, 438,  439,  468, 469, 470,  471,  500,  501,  502,  503,
    408, 409, 410, 411, 440, 441, 442,  443, 472, 473, 474,  475, 504,  505,  506,  507,  412, 413, 414, 415,  444, 445, 446,  447,  476, 477, 478,  479,  508,  509,  510,  511,
    512, 513, 514, 515, 544, 545, 546,  547, 576, 577, 578,  579, 608,  609,  610,  611,  516, 517, 518, 519,  548, 549, 550,  551,  580, 581, 582,  583,  612,  613,  614,  615,
    520, 521, 522, 523, 552, 553, 554,  555, 584, 585, 586,  587, 616,  617,  618,  619,  524, 525, 526, 527,  556, 557, 558,  559,  588, 589, 590,  591,  620,  621,  622,  623,
    528, 529, 530, 531, 560, 561, 562,  563, 592, 593, 594,  595, 624,  625,  626,  627,  532, 533, 534, 535,  564, 565, 566,  567,  596, 597, 598,  599,  628,  629,  630,  631,
    536, 537, 538, 539, 568, 569, 570,  571, 600, 601, 602,  603, 632,  633,  634,  635,  540, 541, 542, 543,  572, 573, 574,  575,  604, 605, 606,  607,  636,  637,  638,  639,
    640, 641, 642, 643, 672, 673, 674,  675, 704, 705, 706,  707, 736,  737,  738,  739,  644, 645, 646, 647,  676, 677, 678,  679,  708, 709, 710,  711,  740,  741,  742,  743,
    648, 649, 650, 651, 680, 681, 682,  683, 712, 713, 714,  715, 744,  745,  746,  747,  652, 653, 654, 655,  684, 685, 686,  687,  716, 717, 718,  719,  748,  749,  750,  751,
    656, 657, 658, 659, 688, 689, 690,  691, 720, 721, 722,  723, 752,  753,  754,  755,  660, 661, 662, 663,  692, 693, 694,  695,  724, 725, 726,  727,  756,  757,  758,  759,
    664, 665, 666, 667, 696, 697, 698,  699, 728, 729, 730,  731, 760,  761,  762,  763,  668, 669, 670, 671,  700, 701, 702,  703,  732, 733, 734,  735,  764,  765,  766,  767,
    768, 769, 770, 771, 800, 801, 802,  803, 832, 833, 834,  835, 864,  865,  866,  867,  772, 773, 774, 775,  804, 805, 806,  807,  836, 837, 838,  839,  868,  869,  870,  871,
    776, 777, 778, 779, 808, 809, 810,  811, 840, 841, 842,  843, 872,  873,  874,  875,  780, 781, 782, 783,  812, 813, 814,  815,  844, 845, 846,  847,  876,  877,  878,  879,
    784, 785, 786, 787, 816, 817, 818,  819, 848, 849, 850,  851, 880,  881,  882,  883,  788, 789, 790, 791,  820, 821, 822,  823,  852, 853, 854,  855,  884,  885,  886,  887,
    792, 793, 794, 795, 824, 825, 826,  827, 856, 857, 858,  859, 888,  889,  890,  891,  796, 797, 798, 799,  828, 829, 830,  831,  860, 861, 862,  863,  892,  893,  894,  895,
    896, 897, 898, 899, 928, 929, 930,  931, 960, 961, 962,  963, 992,  993,  994,  995,  900, 901, 902, 903,  932, 933, 934,  935,  964, 965, 966,  967,  996,  997,  998,  999,
    904, 905, 906, 907, 936, 937, 938,  939, 968, 969, 970,  971, 1000, 1001, 1002, 1003, 908, 909, 910, 911,  940, 941, 942,  943,  972, 973, 974,  975,  1004, 1005, 1006, 1007,
    912, 913, 914, 915, 944, 945, 946,  947, 976, 977, 978,  979, 1008, 1009, 1010, 1011, 916, 917, 918, 919,  948, 949, 950,  951,  980, 981, 982,  983,  1012, 1013, 1014, 1015,
    920, 921, 922, 923, 952, 953, 954,  955, 984, 985, 986,  987, 1016, 1017, 1018, 1019, 924, 925, 926, 927,  956, 957, 958,  959,  988, 989, 990,  991,  1020, 1021, 1022, 1023,

    0,   32,  64,  96,  1,   33,  65,   97,  2,   34,  66,   98,  3,    35,   67,   99,   128, 160, 192, 224,  129, 161, 193,  225,  130, 162, 194,  226,  131,  163,  195,  227,
    256, 288, 320, 352, 257, 289, 321,  353, 258, 290, 322,  354, 259,  291,  323,  355,  384, 416, 448, 480,  385, 417, 449,  481,  386, 418, 450,  482,  387,  419,  451,  483,
    512, 544, 576, 608, 513, 545, 577,  609, 514, 546, 578,  610, 515,  547,  579,  611,  640, 672, 704, 736,  641, 673, 705,  737,  642, 674, 706,  738,  643,  675,  707,  739,
    768, 800, 832, 864, 769, 801, 833,  865, 770, 802, 834,  866, 771,  803,  835,  867,  896, 928, 960, 992,  897, 929, 961,  993,  898, 930, 962,  994,  899,  931,  963,  995,
    4,   36,  68,  100, 5,   37,  69,   101, 6,   38,  70,   102, 7,    39,   71,   103,  132, 164, 196, 228,  133, 165, 197,  229,  134, 166, 198,  230,  135,  167,  199,  231,
    260, 292, 324, 356, 261, 293, 325,  357, 262, 294, 326,  358, 263,  295,  327,  359,  388, 420, 452, 484,  389, 421, 453,  485,  390, 422, 454,  486,  391,  423,  455,  487,
    516, 548, 580, 612, 517, 549, 581,  613, 518, 550, 582,  614, 519,  551,  583,  615,  644, 676, 708, 740,  645, 677, 709,  741,  646, 678, 710,  742,  647,  679,  711,  743,
    772, 804, 836, 868, 773, 805, 837,  869, 774, 806, 838,  870, 775,  807,  839,  871,  900, 932, 964, 996,  901, 933, 965,  997,  902, 934, 966,  998,  903,  935,  967,  999,
    8,   40,  72,  104, 9,   41,  73,   105, 10,  42,  74,   106, 11,   43,   75,   107,  136, 168, 200, 232,  137, 169, 201,  233,  138, 170, 202,  234,  139,  171,  203,  235,
    264, 296, 328, 360, 265, 297, 329,  361, 266, 298, 330,  362, 267,  299,  331,  363,  392, 424, 456, 488,  393, 425, 457,  489,  394, 426, 458,  490,  395,  427,  459,  491,
    520, 552, 584, 616, 521, 553, 585,  617, 522, 554, 586,  618, 523,  555,  587,  619,  648, 680, 712, 744,  649, 681, 713,  745,  650, 682, 714,  746,  651,  683,  715,  747,
    776, 808, 840, 872, 777, 809, 841,  873, 778, 810, 842,  874, 779,  811,  843,  875,  904, 936, 968, 1000, 905, 937, 969,  1001, 906, 938, 970,  1002, 907,  939,  971,  1003,
    12,  44,  76,  108, 13,  45,  77,   109, 14,  46,  78,   110, 15,   47,   79,   111,  140, 172, 204, 236,  141, 173, 205,  237,  142, 174, 206,  238,  143,  175,  207,  239,
    268, 300, 332, 364, 269, 301, 333,  365, 270, 302, 334,  366, 271,  303,  335,  367,  396, 428, 460, 492,  397, 429, 461,  493,  398, 430, 462,  494,  399,  431,  463,  495,
    524, 556, 588, 620, 525, 557, 589,  621, 526, 558, 590,  622, 527,  559,  591,  623,  652, 684, 716, 748,  653, 685, 717,  749,  654, 686, 718,  750,  655,  687,  719,  751,
    780, 812, 844, 876, 781, 813, 845,  877, 782, 814, 846,  878, 783,  815,  847,  879,  908, 940, 972, 1004, 909, 941, 973,  1005, 910, 942, 974,  1006, 911,  943,  975,  1007,
    16,  48,  80,  112, 17,  49,  81,   113, 18,  50,  82,   114, 19,   51,   83,   115,  144, 176, 208, 240,  145, 177, 209,  241,  146, 178, 210,  242,  147,  179,  211,  243,
    272, 304, 336, 368, 273, 305, 337,  369, 274, 306, 338,  370, 275,  307,  339,  371,  400, 432, 464, 496,  401, 433, 465,  497,  402, 434, 466,  498,  403,  435,  467,  499,
    528, 560, 592, 624, 529, 561, 593,  625, 530, 562, 594,  626, 531,  563,  595,  627,  656, 688, 720, 752,  657, 689, 721,  753,  658, 690, 722,  754,  659,  691,  723,  755,
    784, 816, 848, 880, 785, 817, 849,  881, 786, 818, 850,  882, 787,  819,  851,  883,  912, 944, 976, 1008, 913, 945, 977,  1009, 914, 946, 978,  1010, 915,  947,  979,  1011,
    20,  52,  84,  116, 21,  53,  85,   117, 22,  54,  86,   118, 23,   55,   87,   119,  148, 180, 212, 244,  149, 181, 213,  245,  150, 182, 214,  246,  151,  183,  215,  247,
    276, 308, 340, 372, 277, 309, 341,  373, 278, 310, 342,  374, 279,  311,  343,  375,  404, 436, 468, 500,  405, 437, 469,  501,  406, 438, 470,  502,  407,  439,  471,  503,
    532, 564, 596, 628, 533, 565, 597,  629, 534, 566, 598,  630, 535,  567,  599,  631,  660, 692, 724, 756,  661, 693, 725,  757,  662, 694, 726,  758,  663,  695,  727,  759,
    788, 820, 852, 884, 789, 821, 853,  885, 790, 822, 854,  886, 791,  823,  855,  887,  916, 948, 980, 1012, 917, 949, 981,  1013, 918, 950, 982,  1014, 919,  951,  983,  1015,
    24,  56,  88,  120, 25,  57,  89,   121, 26,  58,  90,   122, 27,   59,   91,   123,  152, 184, 216, 248,  153, 185, 217,  249,  154, 186, 218,  250,  155,  187,  219,  251,
    280, 312, 344, 376, 281, 313, 345,  377, 282, 314, 346,  378, 283,  315,  347,  379,  408, 440, 472, 504,  409, 441, 473,  505,  410, 442, 474,  506,  411,  443,  475,  507,
    536, 568, 600, 632, 537, 569, 601,  633, 538, 570, 602,  634, 539,  571,  603,  635,  664, 696, 728, 760,  665, 697, 729,  761,  666, 698, 730,  762,  667,  699,  731,  763,
    792, 824, 856, 888, 793, 825, 857,  889, 794, 826, 858,  890, 795,  827,  859,  891,  920, 952, 984, 1016, 921, 953, 985,  1017, 922, 954, 986,  1018, 923,  955,  987,  1019,
    28,  60,  92,  124, 29,  61,  93,   125, 30,  62,  94,   126, 31,   63,   95,   127,  156, 188, 220, 252,  157, 189, 221,  253,  158, 190, 222,  254,  159,  191,  223,  255,
    284, 316, 348, 380, 285, 317, 349,  381, 286, 318, 350,  382, 287,  319,  351,  383,  412, 444, 476, 508,  413, 445, 477,  509,  414, 446, 478,  510,  415,  447,  479,  511,
    540, 572, 604, 636, 541, 573, 605,  637, 542, 574, 606,  638, 543,  575,  607,  639,  668, 700, 732, 764,  669, 701, 733,  765,  670, 702, 734,  766,  671,  703,  735,  767,
    796, 828, 860, 892, 797, 829, 861,  893, 798, 830, 862,  894, 799,  831,  863,  895,  924, 956, 988, 1020, 925, 957, 989,  1021, 926, 958, 990,  1022, 927,  959,  991,  1023};

static ac_int< 10, false > kvz_g_sig_last_scan2[4092] = {
    0,    2,    1,    3,    0,    1,    2,    3,    0,    2,    1,    3,

    0,    2,    5,    9,    1,    4,    8,    12,   3,    7,    11,   14,   6,    10,   13,   15,   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10,  11,  12,  13,  14,  15,  0,   4,
    8,    12,   1,    5,    9,    13,   2,    6,    10,   14,   3,    7,    11,   15,

    0,    2,    5,    9,    32,   34,   37,   41,   1,    4,    8,    12,   33,   36,   40,   44,   3,    7,    11,   14,   35,   39,   43,   46,   6,    10,   13,  15,  38,  42,  45,  47,  16,  18,
    21,   25,   48,   50,   53,   57,   17,   20,   24,   28,   49,   52,   56,   60,   19,   23,   27,   30,   51,   55,   59,   62,   22,   26,   29,   31,   54,  58,  61,  63,  0,   1,   2,   3,
    16,   17,   18,   19,   4,    5,    6,    7,    20,   21,   22,   23,   8,    9,    10,   11,   24,   25,   26,   27,   12,   13,   14,   15,   28,   29,   30,  31,  32,  33,  34,  35,  48,  49,
    50,   51,   36,   37,   38,   39,   52,   53,   54,   55,   40,   41,   42,   43,   56,   57,   58,   59,   44,   45,   46,   47,   60,   61,   62,   63,   0,   4,   8,   12,  32,  36,  40,  44,
    1,    5,    9,    13,   33,   37,   41,   45,   2,    6,    10,   14,   34,   38,   42,   46,   3,    7,    11,   15,   35,   39,   43,   47,   16,   20,   24,  28,  48,  52,  56,  60,  17,  21,
    25,   29,   49,   53,   57,   61,   18,   22,   26,   30,   50,   54,   58,   62,   19,   23,   27,   31,   51,   55,   59,   63,

    0,    2,    5,    9,    32,   34,   37,   41,   80,   82,   85,   89,   144,  146,  149,  153,  1,    4,    8,    12,   33,   36,   40,   44,   81,   84,   88,  92,  145, 148, 152, 156, 3,   7,
    11,   14,   35,   39,   43,   46,   83,   87,   91,   94,   147,  151,  155,  158,  6,    10,   13,   15,   38,   42,   45,   47,   86,   90,   93,   95,   150, 154, 157, 159, 16,  18,  21,  25,
    64,   66,   69,   73,   128,  130,  133,  137,  192,  194,  197,  201,  17,   20,   24,   28,   65,   68,   72,   76,   129,  132,  136,  140,  193,  196,  200, 204, 19,  23,  27,  30,  67,  71,
    75,   78,   131,  135,  139,  142,  195,  199,  203,  206,  22,   26,   29,   31,   70,   74,   77,   79,   134,  138,  141,  143,  198,  202,  205,  207,  48,  50,  53,  57,  112, 114, 117, 121,
    176,  178,  181,  185,  224,  226,  229,  233,  49,   52,   56,   60,   113,  116,  120,  124,  177,  180,  184,  188,  225,  228,  232,  236,  51,   55,   59,  62,  115, 119, 123, 126, 179, 183,
    187,  190,  227,  231,  235,  238,  54,   58,   61,   63,   118,  122,  125,  127,  182,  186,  189,  191,  230,  234,  237,  239,  96,   98,   101,  105,  160, 162, 165, 169, 208, 210, 213, 217,
    240,  242,  245,  249,  97,   100,  104,  108,  161,  164,  168,  172,  209,  212,  216,  220,  241,  244,  248,  252,  99,   103,  107,  110,  163,  167,  171, 174, 211, 215, 219, 222, 243, 247,
    251,  254,  102,  106,  109,  111,  166,  170,  173,  175,  214,  218,  221,  223,  246,  250,  253,  255,  0,    1,    2,    3,    16,   17,   18,   19,   32,  33,  34,  35,  48,  49,  50,  51,
    4,    5,    6,    7,    20,   21,   22,   23,   36,   37,   38,   39,   52,   53,   54,   55,   8,    9,    10,   11,   24,   25,   26,   27,   40,   41,   42,  43,  56,  57,  58,  59,  12,  13,
    14,   15,   28,   29,   30,   31,   44,   45,   46,   47,   60,   61,   62,   63,   64,   65,   66,   67,   80,   81,   82,   83,   96,   97,   98,   99,   112, 113, 114, 115, 68,  69,  70,  71,
    84,   85,   86,   87,   100,  101,  102,  103,  116,  117,  118,  119,  72,   73,   74,   75,   88,   89,   90,   91,   104,  105,  106,  107,  120,  121,  122, 123, 76,  77,  78,  79,  92,  93,
    94,   95,   108,  109,  110,  111,  124,  125,  126,  127,  128,  129,  130,  131,  144,  145,  146,  147,  160,  161,  162,  163,  176,  177,  178,  179,  132, 133, 134, 135, 148, 149, 150, 151,
    164,  165,  166,  167,  180,  181,  182,  183,  136,  137,  138,  139,  152,  153,  154,  155,  168,  169,  170,  171,  184,  185,  186,  187,  140,  141,  142, 143, 156, 157, 158, 159, 172, 173,
    174,  175,  188,  189,  190,  191,  192,  193,  194,  195,  208,  209,  210,  211,  224,  225,  226,  227,  240,  241,  242,  243,  196,  197,  198,  199,  212, 213, 214, 215, 228, 229, 230, 231,
    244,  245,  246,  247,  200,  201,  202,  203,  216,  217,  218,  219,  232,  233,  234,  235,  248,  249,  250,  251,  204,  205,  206,  207,  220,  221,  222, 223, 236, 237, 238, 239, 252, 253,
    254,  255,  0,    4,    8,    12,   64,   68,   72,   76,   128,  132,  136,  140,  192,  196,  200,  204,  1,    5,    9,    13,   65,   69,   73,   77,   129, 133, 137, 141, 193, 197, 201, 205,
    2,    6,    10,   14,   66,   70,   74,   78,   130,  134,  138,  142,  194,  198,  202,  206,  3,    7,    11,   15,   67,   71,   75,   79,   131,  135,  139, 143, 195, 199, 203, 207, 16,  20,
    24,   28,   80,   84,   88,   92,   144,  148,  152,  156,  208,  212,  216,  220,  17,   21,   25,   29,   81,   85,   89,   93,   145,  149,  153,  157,  209, 213, 217, 221, 18,  22,  26,  30,
    82,   86,   90,   94,   146,  150,  154,  158,  210,  214,  218,  222,  19,   23,   27,   31,   83,   87,   91,   95,   147,  151,  155,  159,  211,  215,  219, 223, 32,  36,  40,  44,  96,  100,
    104,  108,  160,  164,  168,  172,  224,  228,  232,  236,  33,   37,   41,   45,   97,   101,  105,  109,  161,  165,  169,  173,  225,  229,  233,  237,  34,  38,  42,  46,  98,  102, 106, 110,
    162,  166,  170,  174,  226,  230,  234,  238,  35,   39,   43,   47,   99,   103,  107,  111,  163,  167,  171,  175,  227,  231,  235,  239,  48,   52,   56,  60,  112, 116, 120, 124, 176, 180,
    184,  188,  240,  244,  248,  252,  49,   53,   57,   61,   113,  117,  121,  125,  177,  181,  185,  189,  241,  245,  249,  253,  50,   54,   58,   62,   114, 118, 122, 126, 178, 182, 186, 190,
    242,  246,  250,  254,  51,   55,   59,   63,   115,  119,  123,  127,  179,  183,  187,  191,  243,  247,  251,  255,

    0,    2,    5,    9,    32,   34,   37,   41,   80,   82,   85,   89,   144,  146,  149,  153,  224,  226,  229,  233,  320,  322,  325,  329,  432,  434,  437, 441, 560, 562, 565, 569, 1,   4,
    8,    12,   33,   36,   40,   44,   81,   84,   88,   92,   145,  148,  152,  156,  225,  228,  232,  236,  321,  324,  328,  332,  433,  436,  440,  444,  561, 564, 568, 572, 3,   7,   11,  14,
    35,   39,   43,   46,   83,   87,   91,   94,   147,  151,  155,  158,  227,  231,  235,  238,  323,  327,  331,  334,  435,  439,  443,  446,  563,  567,  571, 574, 6,   10,  13,  15,  38,  42,
    45,   47,   86,   90,   93,   95,   150,  154,  157,  159,  230,  234,  237,  239,  326,  330,  333,  335,  438,  442,  445,  447,  566,  570,  573,  575,  16,  18,  21,  25,  64,  66,  69,  73,
    128,  130,  133,  137,  208,  210,  213,  217,  304,  306,  309,  313,  416,  418,  421,  425,  544,  546,  549,  553,  672,  674,  677,  681,  17,   20,   24,  28,  65,  68,  72,  76,  129, 132,
    136,  140,  209,  212,  216,  220,  305,  308,  312,  316,  417,  420,  424,  428,  545,  548,  552,  556,  673,  676,  680,  684,  19,   23,   27,   30,   67,  71,  75,  78,  131, 135, 139, 142,
    211,  215,  219,  222,  307,  311,  315,  318,  419,  423,  427,  430,  547,  551,  555,  558,  675,  679,  683,  686,  22,   26,   29,   31,   70,   74,   77,  79,  134, 138, 141, 143, 214, 218,
    221,  223,  310,  314,  317,  319,  422,  426,  429,  431,  550,  554,  557,  559,  678,  682,  685,  687,  48,   50,   53,   57,   112,  114,  117,  121,  192, 194, 197, 201, 288, 290, 293, 297,
    400,  402,  405,  409,  528,  530,  533,  537,  656,  658,  661,  665,  768,  770,  773,  777,  49,   52,   56,   60,   113,  116,  120,  124,  193,  196,  200, 204, 289, 292, 296, 300, 401, 404,
    408,  412,  529,  532,  536,  540,  657,  660,  664,  668,  769,  772,  776,  780,  51,   55,   59,   62,   115,  119,  123,  126,  195,  199,  203,  206,  291, 295, 299, 302, 403, 407, 411, 414,
    531,  535,  539,  542,  659,  663,  667,  670,  771,  775,  779,  782,  54,   58,   61,   63,   118,  122,  125,  127,  198,  202,  205,  207,  294,  298,  301, 303, 406, 410, 413, 415, 534, 538,
    541,  543,  662,  666,  669,  671,  774,  778,  781,  783,  96,   98,   101,  105,  176,  178,  181,  185,  272,  274,  277,  281,  384,  386,  389,  393,  512, 514, 517, 521, 640, 642, 645, 649,
    752,  754,  757,  761,  848,  850,  853,  857,  97,   100,  104,  108,  177,  180,  184,  188,  273,  276,  280,  284,  385,  388,  392,  396,  513,  516,  520, 524, 641, 644, 648, 652, 753, 756,
    760,  764,  849,  852,  856,  860,  99,   103,  107,  110,  179,  183,  187,  190,  275,  279,  283,  286,  387,  391,  395,  398,  515,  519,  523,  526,  643, 647, 651, 654, 755, 759, 763, 766,
    851,  855,  859,  862,  102,  106,  109,  111,  182,  186,  189,  191,  278,  282,  285,  287,  390,  394,  397,  399,  518,  522,  525,  527,  646,  650,  653, 655, 758, 762, 765, 767, 854, 858,
    861,  863,  160,  162,  165,  169,  256,  258,  261,  265,  368,  370,  373,  377,  496,  498,  501,  505,  624,  626,  629,  633,  736,  738,  741,  745,  832, 834, 837, 841, 912, 914, 917, 921,
    161,  164,  168,  172,  257,  260,  264,  268,  369,  372,  376,  380,  497,  500,  504,  508,  625,  628,  632,  636,  737,  740,  744,  748,  833,  836,  840, 844, 913, 916, 920, 924, 163, 167,
    171,  174,  259,  263,  267,  270,  371,  375,  379,  382,  499,  503,  507,  510,  627,  631,  635,  638,  739,  743,  747,  750,  835,  839,  843,  846,  915, 919, 923, 926, 166, 170, 173, 175,
    262,  266,  269,  271,  374,  378,  381,  383,  502,  506,  509,  511,  630,  634,  637,  639,  742,  746,  749,  751,  838,  842,  845,  847,  918,  922,  925, 927, 240, 242, 245, 249, 352, 354,
    357,  361,  480,  482,  485,  489,  608,  610,  613,  617,  720,  722,  725,  729,  816,  818,  821,  825,  896,  898,  901,  905,  960,  962,  965,  969,  241, 244, 248, 252, 353, 356, 360, 364,
    481,  484,  488,  492,  609,  612,  616,  620,  721,  724,  728,  732,  817,  820,  824,  828,  897,  900,  904,  908,  961,  964,  968,  972,  243,  247,  251, 254, 355, 359, 363, 366, 483, 487,
    491,  494,  611,  615,  619,  622,  723,  727,  731,  734,  819,  823,  827,  830,  899,  903,  907,  910,  963,  967,  971,  974,  246,  250,  253,  255,  358, 362, 365, 367, 486, 490, 493, 495,
    614,  618,  621,  623,  726,  730,  733,  735,  822,  826,  829,  831,  902,  906,  909,  911,  966,  970,  973,  975,  336,  338,  341,  345,  464,  466,  469, 473, 592, 594, 597, 601, 704, 706,
    709,  713,  800,  802,  805,  809,  880,  882,  885,  889,  944,  946,  949,  953,  992,  994,  997,  1001, 337,  340,  344,  348,  465,  468,  472,  476,  593, 596, 600, 604, 705, 708, 712, 716,
    801,  804,  808,  812,  881,  884,  888,  892,  945,  948,  952,  956,  993,  996,  1000, 1004, 339,  343,  347,  350,  467,  471,  475,  478,  595,  599,  603, 606, 707, 711, 715, 718, 803, 807,
    811,  814,  883,  887,  891,  894,  947,  951,  955,  958,  995,  999,  1003, 1006, 342,  346,  349,  351,  470,  474,  477,  479,  598,  602,  605,  607,  710, 714, 717, 719, 806, 810, 813, 815,
    886,  890,  893,  895,  950,  954,  957,  959,  998,  1002, 1005, 1007, 448,  450,  453,  457,  576,  578,  581,  585,  688,  690,  693,  697,  784,  786,  789, 793, 864, 866, 869, 873, 928, 930,
    933,  937,  976,  978,  981,  985,  1008, 1010, 1013, 1017, 449,  452,  456,  460,  577,  580,  584,  588,  689,  692,  696,  700,  785,  788,  792,  796,  865, 868, 872, 876, 929, 932, 936, 940,
    977,  980,  984,  988,  1009, 1012, 1016, 1020, 451,  455,  459,  462,  579,  583,  587,  590,  691,  695,  699,  702,  787,  791,  795,  798,  867,  871,  875, 878, 931, 935, 939, 942, 979, 983,
    987,  990,  1011, 1015, 1019, 1022, 454,  458,  461,  463,  582,  586,  589,  591,  694,  698,  701,  703,  790,  794,  797,  799,  870,  874,  877,  879,  934, 938, 941, 943, 982, 986, 989, 991,
    1014, 1018, 1021, 1023, 0,    1,    2,    3,    16,   17,   18,   19,   32,   33,   34,   35,   48,   49,   50,   51,   64,   65,   66,   67,   80,   81,   82,  83,  96,  97,  98,  99,  112, 113,
    114,  115,  4,    5,    6,    7,    20,   21,   22,   23,   36,   37,   38,   39,   52,   53,   54,   55,   68,   69,   70,   71,   84,   85,   86,   87,   100, 101, 102, 103, 116, 117, 118, 119,
    8,    9,    10,   11,   24,   25,   26,   27,   40,   41,   42,   43,   56,   57,   58,   59,   72,   73,   74,   75,   88,   89,   90,   91,   104,  105,  106, 107, 120, 121, 122, 123, 12,  13,
    14,   15,   28,   29,   30,   31,   44,   45,   46,   47,   60,   61,   62,   63,   76,   77,   78,   79,   92,   93,   94,   95,   108,  109,  110,  111,  124, 125, 126, 127, 128, 129, 130, 131,
    144,  145,  146,  147,  160,  161,  162,  163,  176,  177,  178,  179,  192,  193,  194,  195,  208,  209,  210,  211,  224,  225,  226,  227,  240,  241,  242, 243, 132, 133, 134, 135, 148, 149,
    150,  151,  164,  165,  166,  167,  180,  181,  182,  183,  196,  197,  198,  199,  212,  213,  214,  215,  228,  229,  230,  231,  244,  245,  246,  247,  136, 137, 138, 139, 152, 153, 154, 155,
    168,  169,  170,  171,  184,  185,  186,  187,  200,  201,  202,  203,  216,  217,  218,  219,  232,  233,  234,  235,  248,  249,  250,  251,  140,  141,  142, 143, 156, 157, 158, 159, 172, 173,
    174,  175,  188,  189,  190,  191,  204,  205,  206,  207,  220,  221,  222,  223,  236,  237,  238,  239,  252,  253,  254,  255,  256,  257,  258,  259,  272, 273, 274, 275, 288, 289, 290, 291,
    304,  305,  306,  307,  320,  321,  322,  323,  336,  337,  338,  339,  352,  353,  354,  355,  368,  369,  370,  371,  260,  261,  262,  263,  276,  277,  278, 279, 292, 293, 294, 295, 308, 309,
    310,  311,  324,  325,  326,  327,  340,  341,  342,  343,  356,  357,  358,  359,  372,  373,  374,  375,  264,  265,  266,  267,  280,  281,  282,  283,  296, 297, 298, 299, 312, 313, 314, 315,
    328,  329,  330,  331,  344,  345,  346,  347,  360,  361,  362,  363,  376,  377,  378,  379,  268,  269,  270,  271,  284,  285,  286,  287,  300,  301,  302, 303, 316, 317, 318, 319, 332, 333,
    334,  335,  348,  349,  350,  351,  364,  365,  366,  367,  380,  381,  382,  383,  384,  385,  386,  387,  400,  401,  402,  403,  416,  417,  418,  419,  432, 433, 434, 435, 448, 449, 450, 451,
    464,  465,  466,  467,  480,  481,  482,  483,  496,  497,  498,  499,  388,  389,  390,  391,  404,  405,  406,  407,  420,  421,  422,  423,  436,  437,  438, 439, 452, 453, 454, 455, 468, 469,
    470,  471,  484,  485,  486,  487,  500,  501,  502,  503,  392,  393,  394,  395,  408,  409,  410,  411,  424,  425,  426,  427,  440,  441,  442,  443,  456, 457, 458, 459, 472, 473, 474, 475,
    488,  489,  490,  491,  504,  505,  506,  507,  396,  397,  398,  399,  412,  413,  414,  415,  428,  429,  430,  431,  444,  445,  446,  447,  460,  461,  462, 463, 476, 477, 478, 479, 492, 493,
    494,  495,  508,  509,  510,  511,  512,  513,  514,  515,  528,  529,  530,  531,  544,  545,  546,  547,  560,  561,  562,  563,  576,  577,  578,  579,  592, 593, 594, 595, 608, 609, 610, 611,
    624,  625,  626,  627,  516,  517,  518,  519,  532,  533,  534,  535,  548,  549,  550,  551,  564,  565,  566,  567,  580,  581,  582,  583,  596,  597,  598, 599, 612, 613, 614, 615, 628, 629,
    630,  631,  520,  521,  522,  523,  536,  537,  538,  539,  552,  553,  554,  555,  568,  569,  570,  571,  584,  585,  586,  587,  600,  601,  602,  603,  616, 617, 618, 619, 632, 633, 634, 635,
    524,  525,  526,  527,  540,  541,  542,  543,  556,  557,  558,  559,  572,  573,  574,  575,  588,  589,  590,  591,  604,  605,  606,  607,  620,  621,  622, 623, 636, 637, 638, 639, 640, 641,
    642,  643,  656,  657,  658,  659,  672,  673,  674,  675,  688,  689,  690,  691,  704,  705,  706,  707,  720,  721,  722,  723,  736,  737,  738,  739,  752, 753, 754, 755, 644, 645, 646, 647,
    660,  661,  662,  663,  676,  677,  678,  679,  692,  693,  694,  695,  708,  709,  710,  711,  724,  725,  726,  727,  740,  741,  742,  743,  756,  757,  758, 759, 648, 649, 650, 651, 664, 665,
    666,  667,  680,  681,  682,  683,  696,  697,  698,  699,  712,  713,  714,  715,  728,  729,  730,  731,  744,  745,  746,  747,  760,  761,  762,  763,  652, 653, 654, 655, 668, 669, 670, 671,
    684,  685,  686,  687,  700,  701,  702,  703,  716,  717,  718,  719,  732,  733,  734,  735,  748,  749,  750,  751,  764,  765,  766,  767,  768,  769,  770, 771, 784, 785, 786, 787, 800, 801,
    802,  803,  816,  817,  818,  819,  832,  833,  834,  835,  848,  849,  850,  851,  864,  865,  866,  867,  880,  881,  882,  883,  772,  773,  774,  775,  788, 789, 790, 791, 804, 805, 806, 807,
    820,  821,  822,  823,  836,  837,  838,  839,  852,  853,  854,  855,  868,  869,  870,  871,  884,  885,  886,  887,  776,  777,  778,  779,  792,  793,  794, 795, 808, 809, 810, 811, 824, 825,
    826,  827,  840,  841,  842,  843,  856,  857,  858,  859,  872,  873,  874,  875,  888,  889,  890,  891,  780,  781,  782,  783,  796,  797,  798,  799,  812, 813, 814, 815, 828, 829, 830, 831,
    844,  845,  846,  847,  860,  861,  862,  863,  876,  877,  878,  879,  892,  893,  894,  895,  896,  897,  898,  899,  912,  913,  914,  915,  928,  929,  930, 931, 944, 945, 946, 947, 960, 961,
    962,  963,  976,  977,  978,  979,  992,  993,  994,  995,  1008, 1009, 1010, 1011, 900,  901,  902,  903,  916,  917,  918,  919,  932,  933,  934,  935,  948, 949, 950, 951, 964, 965, 966, 967,
    980,  981,  982,  983,  996,  997,  998,  999,  1012, 1013, 1014, 1015, 904,  905,  906,  907,  920,  921,  922,  923,  936,  937,  938,  939,  952,  953,  954, 955, 968, 969, 970, 971, 984, 985,
    986,  987,  1000, 1001, 1002, 1003, 1016, 1017, 1018, 1019, 908,  909,  910,  911,  924,  925,  926,  927,  940,  941,  942,  943,  956,  957,  958,  959,  972, 973, 974, 975, 988, 989, 990, 991,
    1004, 1005, 1006, 1007, 1020, 1021, 1022, 1023, 0,    4,    8,    12,   128,  132,  136,  140,  256,  260,  264,  268,  384,  388,  392,  396,  512,  516,  520, 524, 640, 644, 648, 652, 768, 772,
    776,  780,  896,  900,  904,  908,  1,    5,    9,    13,   129,  133,  137,  141,  257,  261,  265,  269,  385,  389,  393,  397,  513,  517,  521,  525,  641, 645, 649, 653, 769, 773, 777, 781,
    897,  901,  905,  909,  2,    6,    10,   14,   130,  134,  138,  142,  258,  262,  266,  270,  386,  390,  394,  398,  514,  518,  522,  526,  642,  646,  650, 654, 770, 774, 778, 782, 898, 902,
    906,  910,  3,    7,    11,   15,   131,  135,  139,  143,  259,  263,  267,  271,  387,  391,  395,  399,  515,  519,  523,  527,  643,  647,  651,  655,  771, 775, 779, 783, 899, 903, 907, 911,
    16,   20,   24,   28,   144,  148,  152,  156,  272,  276,  280,  284,  400,  404,  408,  412,  528,  532,  536,  540,  656,  660,  664,  668,  784,  788,  792, 796, 912, 916, 920, 924, 17,  21,
    25,   29,   145,  149,  153,  157,  273,  277,  281,  285,  401,  405,  409,  413,  529,  533,  537,  541,  657,  661,  665,  669,  785,  789,  793,  797,  913, 917, 921, 925, 18,  22,  26,  30,
    146,  150,  154,  158,  274,  278,  282,  286,  402,  406,  410,  414,  530,  534,  538,  542,  658,  662,  666,  670,  786,  790,  794,  798,  914,  918,  922, 926, 19,  23,  27,  31,  147, 151,
    155,  159,  275,  279,  283,  287,  403,  407,  411,  415,  531,  535,  539,  543,  659,  663,  667,  671,  787,  791,  795,  799,  915,  919,  923,  927,  32,  36,  40,  44,  160, 164, 168, 172,
    288,  292,  296,  300,  416,  420,  424,  428,  544,  548,  552,  556,  672,  676,  680,  684,  800,  804,  808,  812,  928,  932,  936,  940,  33,   37,   41,  45,  161, 165, 169, 173, 289, 293,
    297,  301,  417,  421,  425,  429,  545,  549,  553,  557,  673,  677,  681,  685,  801,  805,  809,  813,  929,  933,  937,  941,  34,   38,   42,   46,   162, 166, 170, 174, 290, 294, 298, 302,
    418,  422,  426,  430,  546,  550,  554,  558,  674,  678,  682,  686,  802,  806,  810,  814,  930,  934,  938,  942,  35,   39,   43,   47,   163,  167,  171, 175, 291, 295, 299, 303, 419, 423,
    427,  431,  547,  551,  555,  559,  675,  679,  683,  687,  803,  807,  811,  815,  931,  935,  939,  943,  48,   52,   56,   60,   176,  180,  184,  188,  304, 308, 312, 316, 432, 436, 440, 444,
    560,  564,  568,  572,  688,  692,  696,  700,  816,  820,  824,  828,  944,  948,  952,  956,  49,   53,   57,   61,   177,  181,  185,  189,  305,  309,  313, 317, 433, 437, 441, 445, 561, 565,
    569,  573,  689,  693,  697,  701,  817,  821,  825,  829,  945,  949,  953,  957,  50,   54,   58,   62,   178,  182,  186,  190,  306,  310,  314,  318,  434, 438, 442, 446, 562, 566, 570, 574,
    690,  694,  698,  702,  818,  822,  826,  830,  946,  950,  954,  958,  51,   55,   59,   63,   179,  183,  187,  191,  307,  311,  315,  319,  435,  439,  443, 447, 563, 567, 571, 575, 691, 695,
    699,  703,  819,  823,  827,  831,  947,  951,  955,  959,  64,   68,   72,   76,   192,  196,  200,  204,  320,  324,  328,  332,  448,  452,  456,  460,  576, 580, 584, 588, 704, 708, 712, 716,
    832,  836,  840,  844,  960,  964,  968,  972,  65,   69,   73,   77,   193,  197,  201,  205,  321,  325,  329,  333,  449,  453,  457,  461,  577,  581,  585, 589, 705, 709, 713, 717, 833, 837,
    841,  845,  961,  965,  969,  973,  66,   70,   74,   78,   194,  198,  202,  206,  322,  326,  330,  334,  450,  454,  458,  462,  578,  582,  586,  590,  706, 710, 714, 718, 834, 838, 842, 846,
    962,  966,  970,  974,  67,   71,   75,   79,   195,  199,  203,  207,  323,  327,  331,  335,  451,  455,  459,  463,  579,  583,  587,  591,  707,  711,  715, 719, 835, 839, 843, 847, 963, 967,
    971,  975,  80,   84,   88,   92,   208,  212,  216,  220,  336,  340,  344,  348,  464,  468,  472,  476,  592,  596,  600,  604,  720,  724,  728,  732,  848, 852, 856, 860, 976, 980, 984, 988,
    81,   85,   89,   93,   209,  213,  217,  221,  337,  341,  345,  349,  465,  469,  473,  477,  593,  597,  601,  605,  721,  725,  729,  733,  849,  853,  857, 861, 977, 981, 985, 989, 82,  86,
    90,   94,   210,  214,  218,  222,  338,  342,  346,  350,  466,  470,  474,  478,  594,  598,  602,  606,  722,  726,  730,  734,  850,  854,  858,  862,  978, 982, 986, 990, 83,  87,  91,  95,
    211,  215,  219,  223,  339,  343,  347,  351,  467,  471,  475,  479,  595,  599,  603,  607,  723,  727,  731,  735,  851,  855,  859,  863,  979,  983,  987, 991, 96,  100, 104, 108, 224, 228,
    232,  236,  352,  356,  360,  364,  480,  484,  488,  492,  608,  612,  616,  620,  736,  740,  744,  748,  864,  868,  872,  876,  992,  996,  1000, 1004, 97,  101, 105, 109, 225, 229, 233, 237,
    353,  357,  361,  365,  481,  485,  489,  493,  609,  613,  617,  621,  737,  741,  745,  749,  865,  869,  873,  877,  993,  997,  1001, 1005, 98,   102,  106, 110, 226, 230, 234, 238, 354, 358,
    362,  366,  482,  486,  490,  494,  610,  614,  618,  622,  738,  742,  746,  750,  866,  870,  874,  878,  994,  998,  1002, 1006, 99,   103,  107,  111,  227, 231, 235, 239, 355, 359, 363, 367,
    483,  487,  491,  495,  611,  615,  619,  623,  739,  743,  747,  751,  867,  871,  875,  879,  995,  999,  1003, 1007, 112,  116,  120,  124,  240,  244,  248, 252, 368, 372, 376, 380, 496, 500,
    504,  508,  624,  628,  632,  636,  752,  756,  760,  764,  880,  884,  888,  892,  1008, 1012, 1016, 1020, 113,  117,  121,  125,  241,  245,  249,  253,  369, 373, 377, 381, 497, 501, 505, 509,
    625,  629,  633,  637,  753,  757,  761,  765,  881,  885,  889,  893,  1009, 1013, 1017, 1021, 114,  118,  122,  126,  242,  246,  250,  254,  370,  374,  378, 382, 498, 502, 506, 510, 626, 630,
    634,  638,  754,  758,  762,  766,  882,  886,  890,  894,  1010, 1014, 1018, 1022, 115,  119,  123,  127,  243,  247,  251,  255,  371,  375,  379,  383,  499, 503, 507, 511, 627, 631, 635, 639,
    755,  759,  763,  767,  883,  887,  891,  895,  1011, 1015, 1019, 1023,
};

ac_int< 10, false > coeff_scan[1360] = {
    0,   1,   2,   3,   4,   5,    6,    7,    8,    9,    10,   11,   12,   13,   14,   15,

    0,   1,   2,   3,   8,   9,    10,   11,   16,   17,   18,   19,   24,   25,   26,   27,  4,   5,   6,   7,   12,  13,  14,  15,  20,   21,   22,   23,   28,   29,   30,   31,   32,   33,   34,
    35,  40,  41,  42,  43,  48,   49,   50,   51,   56,   57,   58,   59,   36,   37,   38,  39,  44,  45,  46,  47,  52,  53,  54,  55,   60,   61,   62,   63,

    0,   1,   2,   3,   16,  17,   18,   19,   32,   33,   34,   35,   48,   49,   50,   51,  4,   5,   6,   7,   20,  21,  22,  23,  36,   37,   38,   39,   52,   53,   54,   55,   8,    9,    10,
    11,  24,  25,  26,  27,  40,   41,   42,   43,   56,   57,   58,   59,   12,   13,   14,  15,  28,  29,  30,  31,  44,  45,  46,  47,   60,   61,   62,   63,   64,   65,   66,   67,   80,   81,
    82,  83,  96,  97,  98,  99,   112,  113,  114,  115,  68,   69,   70,   71,   84,   85,  86,  87,  100, 101, 102, 103, 116, 117, 118,  119,  72,   73,   74,   75,   88,   89,   90,   91,   104,
    105, 106, 107, 120, 121, 122,  123,  76,   77,   78,   79,   92,   93,   94,   95,   108, 109, 110, 111, 124, 125, 126, 127, 128, 129,  130,  131,  144,  145,  146,  147,  160,  161,  162,  163,
    176, 177, 178, 179, 132, 133,  134,  135,  148,  149,  150,  151,  164,  165,  166,  167, 180, 181, 182, 183, 136, 137, 138, 139, 152,  153,  154,  155,  168,  169,  170,  171,  184,  185,  186,
    187, 140, 141, 142, 143, 156,  157,  158,  159,  172,  173,  174,  175,  188,  189,  190, 191, 192, 193, 194, 195, 208, 209, 210, 211,  224,  225,  226,  227,  240,  241,  242,  243,  196,  197,
    198, 199, 212, 213, 214, 215,  228,  229,  230,  231,  244,  245,  246,  247,  200,  201, 202, 203, 216, 217, 218, 219, 232, 233, 234,  235,  248,  249,  250,  251,  204,  205,  206,  207,  220,
    221, 222, 223, 236, 237, 238,  239,  252,  253,  254,  255,

    0,   1,   2,   3,   32,  33,   34,   35,   64,   65,   66,   67,   96,   97,   98,   99,  4,   5,   6,   7,   36,  37,  38,  39,  68,   69,   70,   71,   100,  101,  102,  103,  8,    9,    10,
    11,  40,  41,  42,  43,  72,   73,   74,   75,   104,  105,  106,  107,  12,   13,   14,  15,  44,  45,  46,  47,  76,  77,  78,  79,   108,  109,  110,  111,  16,   17,   18,   19,   48,   49,
    50,  51,  80,  81,  82,  83,   112,  113,  114,  115,  20,   21,   22,   23,   52,   53,  54,  55,  84,  85,  86,  87,  116, 117, 118,  119,  24,   25,   26,   27,   56,   57,   58,   59,   88,
    89,  90,  91,  120, 121, 122,  123,  28,   29,   30,   31,   60,   61,   62,   63,   92,  93,  94,  95,  124, 125, 126, 127, 128, 129,  130,  131,  160,  161,  162,  163,  192,  193,  194,  195,
    224, 225, 226, 227, 132, 133,  134,  135,  164,  165,  166,  167,  196,  197,  198,  199, 228, 229, 230, 231, 136, 137, 138, 139, 168,  169,  170,  171,  200,  201,  202,  203,  232,  233,  234,
    235, 140, 141, 142, 143, 172,  173,  174,  175,  204,  205,  206,  207,  236,  237,  238, 239, 144, 145, 146, 147, 176, 177, 178, 179,  208,  209,  210,  211,  240,  241,  242,  243,  148,  149,
    150, 151, 180, 181, 182, 183,  212,  213,  214,  215,  244,  245,  246,  247,  152,  153, 154, 155, 184, 185, 186, 187, 216, 217, 218,  219,  248,  249,  250,  251,  156,  157,  158,  159,  188,
    189, 190, 191, 220, 221, 222,  223,  252,  253,  254,  255,  256,  257,  258,  259,  288, 289, 290, 291, 320, 321, 322, 323, 352, 353,  354,  355,  260,  261,  262,  263,  292,  293,  294,  295,
    324, 325, 326, 327, 356, 357,  358,  359,  264,  265,  266,  267,  296,  297,  298,  299, 328, 329, 330, 331, 360, 361, 362, 363, 268,  269,  270,  271,  300,  301,  302,  303,  332,  333,  334,
    335, 364, 365, 366, 367, 272,  273,  274,  275,  304,  305,  306,  307,  336,  337,  338, 339, 368, 369, 370, 371, 276, 277, 278, 279,  308,  309,  310,  311,  340,  341,  342,  343,  372,  373,
    374, 375, 280, 281, 282, 283,  312,  313,  314,  315,  344,  345,  346,  347,  376,  377, 378, 379, 284, 285, 286, 287, 316, 317, 318,  319,  348,  349,  350,  351,  380,  381,  382,  383,  384,
    385, 386, 387, 416, 417, 418,  419,  448,  449,  450,  451,  480,  481,  482,  483,  388, 389, 390, 391, 420, 421, 422, 423, 452, 453,  454,  455,  484,  485,  486,  487,  392,  393,  394,  395,
    424, 425, 426, 427, 456, 457,  458,  459,  488,  489,  490,  491,  396,  397,  398,  399, 428, 429, 430, 431, 460, 461, 462, 463, 492,  493,  494,  495,  400,  401,  402,  403,  432,  433,  434,
    435, 464, 465, 466, 467, 496,  497,  498,  499,  404,  405,  406,  407,  436,  437,  438, 439, 468, 469, 470, 471, 500, 501, 502, 503,  408,  409,  410,  411,  440,  441,  442,  443,  472,  473,
    474, 475, 504, 505, 506, 507,  412,  413,  414,  415,  444,  445,  446,  447,  476,  477, 478, 479, 508, 509, 510, 511, 512, 513, 514,  515,  544,  545,  546,  547,  576,  577,  578,  579,  608,
    609, 610, 611, 516, 517, 518,  519,  548,  549,  550,  551,  580,  581,  582,  583,  612, 613, 614, 615, 520, 521, 522, 523, 552, 553,  554,  555,  584,  585,  586,  587,  616,  617,  618,  619,
    524, 525, 526, 527, 556, 557,  558,  559,  588,  589,  590,  591,  620,  621,  622,  623, 528, 529, 530, 531, 560, 561, 562, 563, 592,  593,  594,  595,  624,  625,  626,  627,  532,  533,  534,
    535, 564, 565, 566, 567, 596,  597,  598,  599,  628,  629,  630,  631,  536,  537,  538, 539, 568, 569, 570, 571, 600, 601, 602, 603,  632,  633,  634,  635,  540,  541,  542,  543,  572,  573,
    574, 575, 604, 605, 606, 607,  636,  637,  638,  639,  640,  641,  642,  643,  672,  673, 674, 675, 704, 705, 706, 707, 736, 737, 738,  739,  644,  645,  646,  647,  676,  677,  678,  679,  708,
    709, 710, 711, 740, 741, 742,  743,  648,  649,  650,  651,  680,  681,  682,  683,  712, 713, 714, 715, 744, 745, 746, 747, 652, 653,  654,  655,  684,  685,  686,  687,  716,  717,  718,  719,
    748, 749, 750, 751, 656, 657,  658,  659,  688,  689,  690,  691,  720,  721,  722,  723, 752, 753, 754, 755, 660, 661, 662, 663, 692,  693,  694,  695,  724,  725,  726,  727,  756,  757,  758,
    759, 664, 665, 666, 667, 696,  697,  698,  699,  728,  729,  730,  731,  760,  761,  762, 763, 668, 669, 670, 671, 700, 701, 702, 703,  732,  733,  734,  735,  764,  765,  766,  767,  768,  769,
    770, 771, 800, 801, 802, 803,  832,  833,  834,  835,  864,  865,  866,  867,  772,  773, 774, 775, 804, 805, 806, 807, 836, 837, 838,  839,  868,  869,  870,  871,  776,  777,  778,  779,  808,
    809, 810, 811, 840, 841, 842,  843,  872,  873,  874,  875,  780,  781,  782,  783,  812, 813, 814, 815, 844, 845, 846, 847, 876, 877,  878,  879,  784,  785,  786,  787,  816,  817,  818,  819,
    848, 849, 850, 851, 880, 881,  882,  883,  788,  789,  790,  791,  820,  821,  822,  823, 852, 853, 854, 855, 884, 885, 886, 887, 792,  793,  794,  795,  824,  825,  826,  827,  856,  857,  858,
    859, 888, 889, 890, 891, 796,  797,  798,  799,  828,  829,  830,  831,  860,  861,  862, 863, 892, 893, 894, 895, 896, 897, 898, 899,  928,  929,  930,  931,  960,  961,  962,  963,  992,  993,
    994, 995, 900, 901, 902, 903,  932,  933,  934,  935,  964,  965,  966,  967,  996,  997, 998, 999, 904, 905, 906, 907, 936, 937, 938,  939,  968,  969,  970,  971,  1000, 1001, 1002, 1003, 908,
    909, 910, 911, 940, 941, 942,  943,  972,  973,  974,  975,  1004, 1005, 1006, 1007, 912, 913, 914, 915, 944, 945, 946, 947, 976, 977,  978,  979,  1008, 1009, 1010, 1011, 916,  917,  918,  919,
    948, 949, 950, 951, 980, 981,  982,  983,  1012, 1013, 1014, 1015, 920,  921,  922,  923, 952, 953, 954, 955, 984, 985, 986, 987, 1016, 1017, 1018, 1019, 924,  925,  926,  927,  956,  957,  958,
    959, 988, 989, 990, 991, 1020, 1021, 1022, 1023};

// ac_int<11,false> coeff_scan_idx[4] = {0, 16, 80, 336};

static uint_8 cu_get_mode(uint_32 cu) { return cu & 0x3F; }

static uint_8 cu_get_depth(uint_32 cu) { return ((cu >> 6) & 0x03) + 1; }

static uint_8 cu_get_tsf(uint_32 cu) { return (cu >> 14) & 0x01; }

static uint_16 cu_get_cbf(uint_32 cu) { return cu >> 16; }

ac_int< 2, false > kvz_get_scan_order(int_8 cu_type, ac_int< 6, false > intra_mode, ac_int< 3, false > depth) {
  // Scan mode is diagonal, except for 4x4+8x8 luma and 4x4 chroma, where:
  // - angular 6-14 = vertical
  // - angular 22-30 = horizontal
  if (cu_type == CU_INTRA && depth >= 3) {
    if (intra_mode >= 6 && intra_mode <= 14) {
      return SCAN_VER;
    } else if (intra_mode >= 22 && intra_mode <= 30) {
      return SCAN_HOR;
    }
  }

  return SCAN_DIAG;
}

static uint_32 xy_to_zorder(uint_32 width, uint_32 x, uint_32 y) {
  // assert(width % 4 == 0 && width >= 4 && width <= 64);
  // assert(x % 4 == 0 && x < width);
  // assert(y % 4 == 0 && y < width);

  uint_32 result = 0;

  switch (width) {
  case 64:
    result += x / 32 * (32 * 32);
    result += y / 32 * (64 * 32);
    x %= 32;
    y %= 32;
    // fallthrough
  case 32:
    result += x / 16 * (16 * 16);
    result += y / 16 * (32 * 16);
    x %= 16;
    y %= 16;
    // fallthrough
  case 16:
    result += x / 8 * (8 * 8);
    result += y / 8 * (16 * 8);
    x %= 8;
    y %= 8;
    // fallthrough
  case 8:
    result += x / 4 * (4 * 4);
    result += y / 4 * (8 * 4);
    // fallthrough
  case 4:
    break;
  }

  return result;
}

template < int N > ac_int< 5, false > sum_stored_commands(ac_int< CABAC_VAL_WIDTH * 16, false > cabac_writes, ac_int< 5, false > i) {
  ac_int< 5, false > m0, m1;

  m0 = sum_stored_commands< N / 2 >(cabac_writes, i);
  m1 = sum_stored_commands< N - N / 2 >(cabac_writes, i + N / 2);

  return m0 + m1;
}

template <> ac_int< 5, false > sum_stored_commands< 1 >(ac_int< CABAC_VAL_WIDTH * 16, false > cabac_writes, ac_int< 5, false > i) {
  ac_int< 5, false > ret_val = 0;
  if (cabac_writes.slc< 3 >(CABAC_VAL_WIDTH * i) != 0) {
    ret_val = 1;
  }
  return ret_val;
}

static void encode_last_significant_xy(cabac_chan &cabac_write, uint_8 lastpos_x, uint_8 lastpos_y, ac_int< 6, false > width, ac_int< 6, false > height, ac_int< 2, false > type,
                                       ac_int< 2, false > scan) {
  ac_int< 7, false > cur_ctx;
  ac_int< 5, false > cur_ctx_index;

  ac_int< 3, false > index = 0;

  ac_int< 5, false > ctx_offset_index = 0;
  ac_int< 3, false > shift_index = 0;

  /*if(width == 4)
  {
      index = 0;
  }*/
  if (width == 8) {
    index = 1;
    ctx_offset_index = 3;
    shift_index = 1;
  } else if (width == 16) {
    index = 2;
    ctx_offset_index = 6;
    shift_index = 1;
  } else if (width == 32) {
    index = 3;
    ctx_offset_index = 10;
    shift_index = 1;
  } else if (width == 64) {
    index = 4;
    ctx_offset_index = 13;
    shift_index = 1;
  }

  ac_int< 5, false > ctx_offset = type == 0 ? ctx_offset_index : (ac_int< 5, false >)0;
  ac_int< 3, false > shift = type == 0 ? shift_index : (ac_int< 3, false >)index;

  ac_int< 6, false > base_ctx_x_index = 0;
  ac_int< 7, false > base_ctx_x = type == 0 ? 16 : 17;

  ac_int< 6, false > base_ctx_y_index = 0;
  ac_int< 7, false > base_ctx_y = type == 0 ? 14 : 15;

  if (scan == SCAN_VER) {
    SWAP(lastpos_x, lastpos_y, uint_8);
  }

  ac_int< 6, false > group_idx_x = g_group_idx[lastpos_x];
  ac_int< 6, false > group_idx_y = g_group_idx[lastpos_y];

  ac_int< CABAC_VAL_WIDTH * 16 * 2, false > temp_full = 0;
  ac_int< CABAC_VAL_WIDTH * 16, false > temp = 0;
  // x prefix
  if (group_idx_x != 0) {
#pragma hls_unroll yes
    for (ac_int< 4, false > last_x = 0; last_x < 9; last_x++) {
      {
        base_ctx_x_index = ctx_offset + (last_x >> shift);

        cur_ctx_index = base_ctx_x_index;
        cur_ctx = base_ctx_x;

        cabac_val temp_cabac = cabac_param_to_val(1, 0, cur_ctx, cur_ctx_index, CMD_ENCODE_BIN);
        cabac_write.write(temp_cabac);
#ifndef NO_PRINT
        printf("cur_ctx %d, index %d : ", cur_ctx.to_uint(), cur_ctx_index.to_uint());
        printf("%d %s\n", 1, "last_sig_coeff_x_prefix");
#endif
      }

      if (last_x + 1 == group_idx_x)
        break;
    }
  }

  if (group_idx_x < g_group_idx[width - 1]) {
    // CABAC_BIN(cabac, 0, "last_sig_coeff_x_prefix");
    base_ctx_x_index = ctx_offset + (group_idx_x >> shift);

    cur_ctx_index = base_ctx_x_index;
    cur_ctx = base_ctx_x;

    cabac_val temp_cabac = cabac_param_to_val(0, 0, cur_ctx, cur_ctx_index, CMD_ENCODE_BIN);
    cabac_write.write(temp_cabac);

#ifndef NO_PRINT
    printf("cur_ctx %d, index %d : ", cur_ctx.to_uint(), cur_ctx_index.to_uint());
    printf("%d %s\n", 0, "last_sig_coeff_x_prefix");
#endif
  }

  // y prefix
  if (group_idx_y != 0) {
#pragma hls_unroll yes
    for (ac_int< 4, false > last_y = 0; last_y < 9; last_y++) {

      {
        base_ctx_y_index = ctx_offset + (last_y >> shift);

        cur_ctx_index = base_ctx_y_index;
        cur_ctx = base_ctx_y;

        cabac_val temp_cabac = cabac_param_to_val(1, 0, cur_ctx, cur_ctx_index, CMD_ENCODE_BIN);
        cabac_write.write(temp_cabac);
#ifndef NO_PRINT
        printf("cur_ctx %d, index %d : ", cur_ctx.to_uint(), cur_ctx_index.to_uint());
        printf("%d %s\n", 1, "last_sig_coeff_y_prefix");
#endif
      }

      if (last_y + 1 == group_idx_y)
        break;
    }
  }

  if (group_idx_y < g_group_idx[height - 1]) {
    base_ctx_y_index = ctx_offset + (group_idx_y >> shift);

    cur_ctx_index = base_ctx_y_index;
    cur_ctx = base_ctx_y;

    cabac_val temp_cabac1 = cabac_param_to_val(0, 0, cur_ctx, cur_ctx_index, CMD_ENCODE_BIN);
    cabac_write.write(temp_cabac1);

#ifndef NO_PRINT
    printf("cur_ctx %d, index %d : ", cur_ctx.to_uint(), cur_ctx_index.to_uint());
    printf("%d %s\n", 0, "last_sig_coeff_y_prefix");
#endif
  }

  if (group_idx_x > 3) {
    int_32 suffix = lastpos_x - g_min_in_group[group_idx_x];
    int_32 bits = (group_idx_x - 2) >> 1;
    // CABAC_BINS_EP(cabac, suffix, bits, "last_sig_coeff_x_suffix");

    cabac_val temp_cabac2 = cabac_param_to_val(suffix, bits, cur_ctx, cur_ctx_index, CMD_ENCODE_BINS_EP);
    cabac_write.write(temp_cabac2);

#ifndef NO_PRINT
    printf("cur_ctx %d, index %d : ", cur_ctx.to_uint(), cur_ctx_index.to_uint());
    printf("%d %d %s\n", suffix.to_uint(), bits.to_uint(), "last_sig_coeff_x_suffix");
#endif
  }

  // last_sig_coeff_y_suffix
  if (group_idx_y > 3) {
    int_32 suffix = lastpos_y - g_min_in_group[group_idx_y];
    int_32 bits = (group_idx_y - 2) >> 1;
    // CABAC_BINS_EP(cabac, suffix, bits, "last_sig_coeff_y_suffix");

    cabac_val temp_cabac3 = cabac_param_to_val(suffix, bits, cur_ctx, cur_ctx_index, CMD_ENCODE_BINS_EP);
    cabac_write.write(temp_cabac3);

#ifndef NO_PRINT
    printf("cur_ctx %d, index %d : ", cur_ctx.to_uint(), cur_ctx_index.to_uint());
    printf("%d %d %s\n", suffix.to_uint(), bits.to_uint(), "last_sig_coeff_y_suffix");
#endif
  }
}

ac_int< 1, false > kvz_context_get_sig_coeff_group(ac_int< 1, false > *sig_coeff_group_flag, ac_int< 7, false > pos_x, ac_int< 7, false > pos_y, ac_int< 6, false > width) {
  ac_int< 1, false > uiRight = 0;
  ac_int< 1, false > uiLower = 0;

  ac_int< 6, false > width_new = 1;
  ac_int< 2, false > shift = 0;

  if (width == 8) {
    width_new = 2;
    shift = 1;
  }
  if (width == 16) {
    width_new = 4;
    shift = 2;
  } else if (width == 32) {
    width_new = 8;
    shift = 3;
  }

  // width >>= 2;
  if (pos_x < width_new - 1)
    uiRight = (sig_coeff_group_flag[(pos_y << shift) + pos_x + 1] != 0);
  if (pos_y < width_new - 1)
    uiLower = (sig_coeff_group_flag[((pos_y + 1) << shift) + pos_x] != 0);

  return uiRight || uiLower;
}

ac_int< 2, false > kvz_context_calc_pattern_sig_ctx(ac_int< 1, false > *sig_coeff_group_flag, ac_int< 7, false > pos_x, ac_int< 7, false > pos_y, ac_int< 6, false > width) {
  ac_int< 1, false > sigRight = 0;
  ac_int< 2, false > sigLower = 0;

  if (width == 4)
    return -1;

  ac_int< 6, false > width_new = 2;
  ac_int< 2, false > shift = 1;

  if (width == 16) {
    width_new = 4;
    shift = 2;
  } else if (width == 32) {
    width_new = 8;
    shift = 3;
  }
  // width >>= 2;
  if (pos_x < width_new - 1)
    sigRight = (sig_coeff_group_flag[(pos_y << shift) + pos_x + 1] != 0);
  if (pos_y < width_new - 1)
    sigLower = (sig_coeff_group_flag[((pos_y + 1) << shift) + pos_x] != 0);

  return sigRight + (sigLower << 1);
}

void kvz_context(ac_int< 1, false > *sig_coeff_group_flag, ac_int< 7, false > pos_x, ac_int< 7, false > pos_y, ac_int< 6, false > width, ac_int< 2, false > &pattern_sig_ctx,
                 ac_int< 1, false > &sig_coeff_group) {
  ac_int< 1, false > uiRight = 0;
  ac_int< 1, false > uiLower = 0;

  ac_int< 6, false > width_new = 1;
  ac_int< 2, false > shift = 0;

  if (width == 8) {
    width_new = 2;
    shift = 1;
  } else if (width == 16) {
    width_new = 4;
    shift = 2;
  } else if (width == 32) {
    width_new = 8;
    shift = 3;
  }

  // width >>= 2;
  if (pos_x < width_new - 1)
    uiRight = (sig_coeff_group_flag[(pos_y << shift) + pos_x + 1] != 0);
  if (pos_y < width_new - 1)
    uiLower = (sig_coeff_group_flag[((pos_y + 1) << shift) + pos_x] != 0);

  if (width == 4) {
    pattern_sig_ctx = 3;
  } else {
    pattern_sig_ctx = uiLower;
    pattern_sig_ctx <<= 1;
    pattern_sig_ctx |= uiRight;
  }
  sig_coeff_group = uiRight || uiLower;
}

ac_int< 4, false > ctx_ind_map[16] = {0, 1, 4, 5, 2, 3, 4, 5, 6, 6, 8, 8, 7, 7, 8, 8};

ac_int< 7, false > kvz_context_get_sig_ctx_inc(ac_int< 2, false > pattern_sig_ctx, ac_int< 2, false > scan_idx, ac_int< 6, false > pos_x, ac_int< 6, false > pos_y, ac_int< 3, false > block_type,
                                               ac_int< 2, false > texture_type) {

  ac_int< 2, false > cnt;
  ac_int< 5, false > offset;
  ac_int< 2, false > pos_x_in_subset;
  ac_int< 2, false > pos_y_in_subset;
  ac_int< 7, false > ret_val = 0;

  // if (pos_x + pos_y == 0)
  if (pos_x == 0 && pos_y == 0) {
    ret_val = 0;
    // return 0;
  } else if (block_type == 2) {
    ret_val = ctx_ind_map[4 * pos_y + pos_x];
  } else {
    offset = (block_type == 3) ? ((scan_idx == SCAN_DIAG) ? 9 : 15) : ((texture_type == 0) ? 21 : 12);
    pos_x_in_subset = pos_x.slc< 2 >(0); // - ((pos_x>>2)<<2);
    pos_y_in_subset = pos_y.slc< 2 >(0); // - ((pos_y>>2)<<2);

    if (pattern_sig_ctx == 0) {
      cnt = (pos_x_in_subset + pos_y_in_subset <= 2) ? ((pos_x_in_subset == 0 && pos_y_in_subset == 0) ? 2 : 1) : 0;
    } else if (pattern_sig_ctx == 1) {
      cnt = (pos_y_in_subset <= 1) ? ((pos_y_in_subset == 0) ? 2 : 1) : 0;
    } else if (pattern_sig_ctx == 2) {
      cnt = (pos_x_in_subset <= 1) ? ((pos_x_in_subset == 0) ? 2 : 1) : 0;
    } else {
      cnt = 2;
    }
    ret_val = ((texture_type == 0 && ((pos_x.slc< 4 >(2) != 0) || (pos_y.slc< 4 >(2) != 0))) ? 3 : 0) + offset + cnt;
  }
  return ret_val;
}

struct coeff_struct {
  coeff_t coeff[1024 * 2];
};

struct coeff_struct_wide {
  ac_int< 256, false > coeff[128];
};

template < int BITS > ac_int< 5, false > msb_index(ac_int< BITS, false > value, ac_int< 5, false > index) {
  ac_int< BITS - BITS / 2, false > upper = value >> (BITS / 2);
  ac_int< BITS / 2, false > lower = value;

  ac_int< 5, false > ret_val;
  if (upper) {
    ret_val = msb_index< BITS - BITS / 2 >(upper, index + BITS / 2);
  } else {
    ret_val = msb_index< BITS / 2 >(lower, index);
  }
  return ret_val;
}

template <> ac_int< 5, false > msb_index< 1 >(ac_int< 1, false > value, ac_int< 5, false > index) { return index; }

template < int N > ac_int< 5, false > sum(ac_int< 16, false > *a, ac_int< 5, false > i, ac_int< 5, false > limit) {
  ac_int< 5, false > m0, m1;

  m0 = sum< N / 2 >(a, i, limit);
  m1 = sum< N - N / 2 >(a, i + N / 2, limit);

  return m0 + m1;
}

template <> ac_int< 5, false > sum< 1 >(ac_int< 16, false > *a, ac_int< 5, false > i, ac_int< 5, false > limit) {
  ac_int< 5, false > ret_val = a[i] != 0;
  if (i > limit) {
    ret_val = 0;
  } else {
    ret_val = 0;
  }
  return ret_val;
}

template < int N > ac_int< 5, false > sum1bit(ac_int< 1, false > *a, ac_int< 5, false > i) {
  ac_int< 5, false > m0, m1;

  m0 = sum1bit< N / 2 >(a, i);
  m1 = sum1bit< N - N / 2 >(a, i + N / 2);

  return m0 + m1;
}

template <> ac_int< 5, false > sum1bit< 1 >(ac_int< 1, false > *a, ac_int< 5, false > i) { return a[i]; }

template < int BITS > ac_int< 5, false > sum1bit_limit(ac_int< BITS, false > a) {
  ac_int< 5, false > m0, m1;

  ac_int< BITS - BITS / 2, false > upper = a.slc< BITS - BITS / 2 >(BITS / 2);
  ac_int< BITS / 2, false > lower = a.slc< BITS / 2 >(0);
  m0 = sum1bit_limit< BITS / 2 >(lower);
  m1 = sum1bit_limit< BITS - BITS / 2 >(upper);

  return m0 + m1;
}

template <> ac_int< 5, false > sum1bit_limit< 1 >(ac_int< 1, false > a) { return a; }

template < int N > ac_int< 5, false > count_values_in_array(ac_int< 2, false > *a, ac_int< 5, false > i, ac_int< 1, false > value, ac_int< 5, false > limit) {
  ac_int< 5, false > m0, m1;

  m0 = count_values_in_array< N / 2 >(a, i, value, limit);
  m1 = count_values_in_array< N - N / 2 >(a, i + N / 2, value, limit);

  ac_int< 5, false > temp = m0 + m1;

  return temp;
}

template <> ac_int< 5, false > count_values_in_array< 1 >(ac_int< 2, false > *a, ac_int< 5, false > i, ac_int< 1, false > value, ac_int< 5, false > limit) {
  ac_int< 5, false > ret_val = 0;
  if (a[i] == value && i <= limit) {
    ret_val = 1;
  } else {
    ret_val = 0;
  }

  return ret_val;
}

template < int N > ac_int< 3, true > c1_calc(ac_int< 2, false > *a, ac_int< 5, false > i, ac_int< 5, false > limit) {
  ac_int< 3, true > m0, m1;

  m0 = c1_calc< N / 2 >(a, i, limit);
  m1 = c1_calc< N - N / 2 >(a, i + N / 2, limit);

  ac_int< 4, true > temp = m0 + m1;

  if (m0 == 0 || m1 == 0) {
    temp = 0;
    if (N == 16) {
      temp = -1;
    }
  } else if (temp == -2) {
    temp = -1;
    if (N == 16) {
      temp = 0;
    }
  } else {
    if (m0 == -1 || m1 == -1) {
      temp = temp + 1;
    }
  }

  if (temp > 3) {
    temp = 3;
  }

  return temp;
}

template <> ac_int< 3, true > c1_calc< 1 >(ac_int< 2, false > *a, ac_int< 5, false > i, ac_int< 5, false > limit) {
  ac_int< 3, true > ret_val = 0;
  if (i >= limit || a[i] == 3) {
    ret_val = -1;
  } else {
    ret_val = a[i];
  }
  return ret_val;
}

template < int N > ac_int< 5, false > min_idx(ac_int< 2, false > *a, ac_int< 5, false > i, ac_int< 1, false > value) {
  ac_int< 5, false > m0, m1;

  m0 = min_idx< N / 2 >(a, i, value);
  m1 = min_idx< N - N / 2 >(a, i + N / 2, value);

  ac_int< 5, false > ret_val = 0;

  if (m0 < m1) {
    ret_val = m0;
  } else {
    ret_val = m1;
  }
  return ret_val;
}

template <> ac_int< 5, false > min_idx< 1 >(ac_int< 2, false > *a, ac_int< 5, false > i, ac_int< 1, false > value) {
  ac_int< 5, false > ret_val = 0;
  if (a[i] == value) {
    ret_val = i;
  } else {
    ret_val = 16;
  }
  return ret_val;
}

template < int N > ac_int< 5, false > max_idx(ac_int< 2, false > *a, ac_int< 5, false > i, ac_int< 1, false > value) {
  ac_int< 5, false > m0, m1;

  m0 = max_idx< N / 2 >(a, i, value);
  m1 = max_idx< N - N / 2 >(a, i + N / 2, value);

  ac_int< 5, false > ret_val = 0;
  if (m0 > m1) {
    ret_val = m0;
  } else {
    ret_val = m1;
  }
  return ret_val;
}

template <> ac_int< 5, false > max_idx< 1 >(ac_int< 2, false > *a, ac_int< 5, false > i, ac_int< 1, false > value) {
  ac_int< 5, false > ret_val = 0;
  if (a[i] == value) {
    ret_val = i;
  } else {
    ret_val = 0;
  }
  return ret_val;
}

template < int N > ac_int< 5, false > min_idx_c2(ac_int< 15, false > *a, ac_int< 5, false > i) {
  ac_int< 5, false > m0, m1;

  m0 = min_idx_c2< N / 2 >(a, i);
  m1 = min_idx_c2< N - N / 2 >(a, i + N / 2);

  ac_int< 5, false > ret_val = 0;
  if (m0 < m1) {
    ret_val = m0;
  } else {
    ret_val = m1;
  }
  return ret_val;
}

template <> ac_int< 5, false > min_idx_c2< 1 >(ac_int< 15, false > *a, ac_int< 5, false > i) {
  ac_int< 5, false > ret_val = 0;
  if (a[i] >= 2) {
    ret_val = i;
  } else {
    ret_val = 16;
  }
  return ret_val;
}

template < int N > ac_int< 5, false > min_idx_abs(ac_int< 15, false > *a, ac_int< 5, false > i, ac_int< 15, false > value, ac_int< 5, false > start_pos) {
  ac_int< 5, false > m0, m1;

  m0 = min_idx_abs< N / 2 >(a, i, value, start_pos);
  m1 = min_idx_abs< N - N / 2 >(a, i + N / 2, value, start_pos);

  ac_int< 5, false > ret_val = 0;
  if (m0 < m1) {
    ret_val = m0;
  } else {
    ret_val = m1;
  }
  return ret_val;
}

template <> ac_int< 5, false > min_idx_abs< 1 >(ac_int< 15, false > *a, ac_int< 5, false > i, ac_int< 15, false > value, ac_int< 5, false > start_pos) {
  ac_int< 5, false > ret_val = 16;
  if (a[i] > value && start_pos <= i) {
    ret_val = 1;
  } else {
    ret_val = 16;
  }
  return ret_val;
}

template < int N > ac_int< 5, false > find_ctx(ac_int< CABAC_VAL_WIDTH * 16, false > &a, ac_int< 5, false > i) {
  ac_int< 5, false > m0, m1;

  m0 = find_ctx< N / 2 >(a, i);
  m1 = find_ctx< N - N / 2 >(a, i + N / 2);

  ac_int< 5, false > ret_val = 0;
  if (m0 > m1) {
    ret_val = m0;
  } else {
    ret_val = m1;
  }
  return ret_val;
}

template <> ac_int< 5, false > find_ctx< 1 >(ac_int< CABAC_VAL_WIDTH * 16, false > &a, ac_int< 5, false > i) {
  ac_int< 5, false > ret_val = 0;
  if (a.slc< CABAC_VAL_WIDTH >(CABAC_VAL_WIDTH * i) != 0) {
    ret_val = i;
  } else {
    ret_val = 0;
  }
  return ret_val;
}

void abs_coeff_func(ac_int< 15, false > abs_coeff[16], ac_int< 1, false > abs_coeff_not_zero[16], ac_int< 5, false > non_zeros_count_cache[16], ac_int< 7, false > base_ctx_mod,
                    ac_int< 2, false > ctx_set, ac_int< 5, false > num_c1_flag, ac_int< 5, false > minc2, cabac_chan &cabac_write) {
  // Cabac writes for non abs == 1 && non zero
  ac_int< 5, false > non_zeros_count = 0;
#pragma hls_unroll yes
ABS_COEFFs:
  for (ac_int< 5, false > idx = 0; idx < 16; idx++) {
    ac_int< 5, false > non_zeros_count = non_zeros_count_cache[idx];
    cabac_val temp_cabac = 0;
    ac_int< 2, false > c1_temp = 0;

    if (non_zeros_count > num_c1_flag) {
      break;
    }

    if (non_zeros_count.slc< 3 >(2) != 0) {
      c1_temp = 3;
    } else {
      c1_temp = non_zeros_count.slc< 2 >(0);
    }

    if (idx > minc2) {
      c1_temp = 0;
    }

    ac_int< 1, false > symbol = abs_coeff[idx] != 1;
    temp_cabac = cabac_param_to_val(symbol, 0, base_ctx_mod, 4 * ctx_set + c1_temp, CMD_ENCODE_BIN);
    if (abs_coeff_not_zero[idx]) {
      cabac_write.write(temp_cabac);

#ifndef NO_PRINT
      printf("cur_ctx %d, index %d : ", (base_ctx_mod).to_uint(), (4 * ctx_set + c1_temp).to_uint());
      printf("%d %s\n", symbol.to_uint(), "coeff_abs_level_greater1_flag");
#endif
    }
  }
}

void coeffs_func(ac_int< 1, false > abs_coeff_not_zero[16], ac_int< 14, true > scan_pos_sig, ac_int< 14, true > sub_pos, ac_int< 4, false > block_bits, ac_int< 5, false > non_zeros_count_cache[16],
                 ac_int< 7, false > baseCtx, ac_int< 2, false > type, ac_int< 2, false > scan_mode, ac_int< 7, false > scan_cg_last, ac_int< 2, false > pattern_sig_ctx,
                 ac_int< 3, false > log2_block_size, ac_int< 1, false > abs_offset, ac_int< 6, false > pos_x_array[16], ac_int< 6, false > pos_y_array[16], cabac_chan &cabac_write) {
// Simple cabac writes of abs_coeff_not_zero
#pragma hls_unroll yes
COEFFs:
  for (ac_int< 5, false > aa = 0; aa < 16; aa++) {
    ac_int< 5, false > non_zeros_count = non_zeros_count_cache[aa + abs_offset - 1];
    ac_int< 7, false > ctx_sig = kvz_context_get_sig_ctx_inc(pattern_sig_ctx, scan_mode, pos_x_array[aa + abs_offset], pos_y_array[aa + abs_offset], log2_block_size, type);

    cabac_val temp_cabac = cabac_param_to_val(abs_coeff_not_zero[aa + abs_offset], 0, baseCtx, ctx_sig, CMD_ENCODE_BIN);
    // if(scan_pos_sig-aa >= sub_pos)
    {
      if (scan_pos_sig - aa != sub_pos || (scan_cg_last) == 0 || non_zeros_count != 0) {
        cabac_write.write(temp_cabac);

#ifndef NO_PRINT
        printf("cur_ctx %d, index %d : ", (baseCtx).to_uint(), (ctx_sig).to_uint());
        printf("%d %s\n", abs_coeff_not_zero[aa + abs_offset].to_uint(), "sig_coeff_flag");
#endif
      }
    }
    if (scan_pos_sig - aa - 1 < sub_pos) {
      break;
    }
  }
}

uint_16 code_number_bottom_mask[5] = {0xffff, 0xfffe, 0xfffc, 0xfff8, 0xfff0};

ac_int< 6, false > rice_lut[5] = {3, 6, 12, 24, 48};

void non_zeros_func(ac_int< 15, false > abs_coeff[16], ac_int< 5, false > non_zeros_count_cache[16], ac_int< 5, false > go_rices_0 /*[6]*/, ac_int< 7, false > base_ctx_mod,
                    ac_int< 6, false > cur_ctx_index_temp, cabac_chan &cabac_write) {
  ac_int< 3, false > go_rice_param = 0;
  ac_int< 6, false > rice = 3;
  uint_16 code_number_b_mask = 0xffff;
  ac_int< 4, false > code_number_mask = 0;
#pragma hls_unroll yes
NON_ZEROs:
  for (ac_int< 6, false > idx = 0; idx < 16; idx++) {
    ac_int< 1, false > first_coeff2 = 1;
    ac_int< 5, false > non_zeros_count = 0;

    // idx == 0 non_zeros_count is always 0
    if (idx != 0) {
      non_zeros_count = non_zeros_count_cache[idx - 1];
    }

    // Break because last non zero coeff
    if (non_zeros_count == non_zeros_count_cache[15]) {
      break;
    }

    // idx == 0 first_coeff2 is always 1
    if (go_rices_0 < idx) {
      first_coeff2 = 0;
    }

    ac_int< 3, false > base_level = (non_zeros_count < C1FLAG_NUMBER) ? (ac_int< 3, false >)(2 + first_coeff2) : (ac_int< 3, false >)1;

    {
      ac_int< 16, false > ones_16 = 0xffff;
      ac_int< 16, true > code_number_base = abs_coeff[idx] - base_level;
      // length when (code_number_base < rice) is following
      ac_int< 5, false > length = code_number_base >> go_rice_param;
      ac_int< 4, false > code_number1 = code_number_base & code_number_mask;
      ac_int< 16, true > code_number2 = code_number_base - rice;
      ac_int< 16, true > code_number3;
      ac_int< 16, true > code_number4;
      ac_int< 5, false > length2;
      // length when (code_number_base >= rice) is almost msb
      ac_int< 5, false > length3 = msb_index< 16 >(code_number2, 0);

      ac_int< 16, false > shift4 = ones_16 >> (15 - length3);
      ac_int< 16, false > shift3 = shift4 >> 1;

      code_number3 = code_number2 - (shift3 & code_number_b_mask);
      code_number4 = code_number2 - (shift4 & code_number_b_mask);

      // min length when (code_number_base >= rice) is go_rice_param
      length2 = go_rice_param;

      if (code_number2 & code_number_b_mask) {
        // if code_number4 is not negative, add msb length by one and choose it as code_number
        length2 = length3 + (code_number4[15] == 0);
        if (code_number4[15] == 0) {
          code_number2 = code_number4;
        } else {
          code_number2 = code_number3;
        }
      }
      ac_int< CABAC_VAL_WIDTH, false > temp_cabac_1 = 0;
      ac_int< CABAC_VAL_WIDTH, false > temp_cabac_2 = 0;

      if (code_number_base[15] == 0) {
        ac_int< 16, false > bin_value_s1 = 0;
        ac_int< 6, true > num_bins1 = 0;

        ac_int< 16, false > bin_value_s2 = 0;
        ac_int< 6, true > num_bins2 = 0;

        if (code_number_base < rice) {
          bin_value_s1 = (1 << (length + 1)) - 2;
          num_bins1 = length + 1;

          bin_value_s2 = code_number1;
          num_bins2 = go_rice_param;
        } else {
          bin_value_s1 = (1 << (3 + length2 + 1 - go_rice_param)) - 2;
          num_bins1 = 3 + length2 + 1 - go_rice_param;

          bin_value_s2 = code_number2;
          num_bins2 = length2;
        }

        temp_cabac_1 = cabac_param_to_val(bin_value_s1, num_bins1, base_ctx_mod, cur_ctx_index_temp, CMD_ENCODE_BINS_EP);
#ifndef NO_PRINT
        printf("cur_ctx %d, index %d : ", (base_ctx_mod).to_uint(), (cur_ctx_index_temp).to_uint());
        printf("%d %d %s\n", bin_value_s1.to_uint(), num_bins1.to_uint(), "coeff_abs_level_remaining1");
#endif

        temp_cabac_2 = cabac_param_to_val(bin_value_s2, num_bins2, base_ctx_mod, cur_ctx_index_temp, CMD_ENCODE_BINS_EP);
#ifndef NO_PRINT
        printf("cur_ctx %d, index %d : ", (base_ctx_mod).to_uint(), (cur_ctx_index_temp).to_uint());
        printf("%d %d %s\n", bin_value_s2.to_uint(), num_bins2.to_uint(), "coeff_abs_level_remaining2");
#endif

        cabac_write.write(temp_cabac_1);
        cabac_write.write(temp_cabac_2);
      }
    }

    // Update variables according to abs_coeff[idx] > rice
    if (abs_coeff[idx] > rice && go_rice_param.slc< 1 >(2) != 1) {
      rice <<= 1;
      code_number_mask <<= 1;
      code_number_mask |= 1;
      go_rice_param++;
      code_number_b_mask = 0xffff - code_number_mask;
    }
  }
}

ac_int< 3, false > cg_blk_pos_mask[4] = {0x0, 0x1, 0x3, 0x7};

void coeff_group_scanning(cabac_chan &cabac_write, ac_channel< ac_int< 1 + 6 + 2 + 2 + 10 + 7 + 8 + 8 + 64 > > &encode_coeff_config_in, ac_channel< coeff_struct_wide > &coeff_s,
                          ac_channel< ac_int< 7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6 + 3 + 3 + 3 > > &coeff_data,
                          ac_channel< ac_int< 7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6 + 3 + 3 + 3 > > &coeff_data2) {
  ac_int< 6, false > width;
  ac_int< 2, false > type;
  ac_int< 2, false > scan_mode;
  ac_int< 10, false > scan_pos_last;
  ac_int< 7, false > scan_cg_last;
  ac_int< 14, true > sub_pos;
  ac_int< 3, false > log2_block_size = 2;
  ac_int< 4, false > block_bits = 0;
  ac_int< 4, false > num_blk_side = 1;
  ac_int< 1, false > sig_coeffgroup_flag[64];
  ac_int< 1, false > ping_pong = 0;

  // Read and parse data from first coeff coding block in the pipeline
  ac_int< 1 + 6 + 2 + 2 + 10 + 7 + 8 + 8 + 64 > temp = 0;
  temp = encode_coeff_config_in.read();

  coeff_struct_wide array_in;
  array_in = coeff_s.read();

  ac_int< 256, false > *coeff;

  // Choose memory location for CGs according to pingpong bit
  if (temp[0] == 0) {
    coeff = &array_in.coeff[0];
  } else {
    coeff = &array_in.coeff[64];
  }

  width = temp.slc< 6 >(1);
  type = temp.slc< 2 >(1 + 6);
  scan_mode = temp.slc< 2 >(1 + 6 + 2);
  scan_pos_last = temp.slc< 10 >(1 + 6 + 2 + 2);
  scan_cg_last = temp.slc< 7 >(1 + 6 + 2 + 2 + 10);

  uint_8 last_coeff_x = temp.slc< 7 >(1 + 6 + 2 + 2 + 10 + 7);
  uint_8 last_coeff_y = temp.slc< 7 >(1 + 6 + 2 + 2 + 10 + 7 + 8);

#pragma hls_unroll yes
  for (int a = 0; a < 64; a++) {
    sig_coeffgroup_flag[a] = temp.slc< 1 >(1 + 6 + 2 + 2 + 10 + 7 + 8 + 8 + a);
  }

  if (width == 8) {
    log2_block_size = 3;
    block_bits = 1;
    num_blk_side = 2;
  } else if (width == 16) {
    log2_block_size = 4;
    block_bits = 2;
    num_blk_side = 4;
  } else if (width == 32) {
    log2_block_size = 5;
    block_bits = 3;
    num_blk_side = 8;
  }

  // encode_last_significant_xy cabac writes
  encode_last_significant_xy(cabac_write, last_coeff_x, last_coeff_y, width, width, type, scan_mode);

  // Signal arbiter to start reading from kvz_encode_coeff_nxn_code blocks
  cabac_write.write(CMD_DONE_BIT);

  // LUT for CG and coeff indexing
  ac_int< 5, false > *scan4 = &kvz_g_sig_last_scan4[scan_mode * 16];
  ac_int< 7, false > *scan_cg = &g_sig_last_scan_cg[g_sig_last_scan_cg_idx[log2_block_size - 2][scan_mode]];

  ac_int< 3, false > c1 = 1;
  ac_int< 3, false > c1_prev = 0;

// Loop for reading all CGs and pre calculating necessary values
CGs:
  for (ac_int< 7, false > i = 0; i < 64; i++) {
    ac_int< 11, false > sub_pos = ((ac_int< 11, false >)scan_cg_last - i) << 4; // LOG2_SCAN_SET_SIZE;
    ac_int< 7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6 + 3 + 3 + 3 > coeff_data_temp = 0;
    ac_int< 7, false > cg_blk_pos = scan_cg[scan_cg_last - i];
    ac_int< 14, true > scan_pos_sig;
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5, sub_pos);
    if (i == 0) {
      scan_pos_sig = scan_pos_last;
      coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11, scan_pos_sig - 1);
      coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14, (ac_int< 1, false >)1);
    } else {
      scan_pos_sig = sub_pos + 15;
      coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11, scan_pos_sig);
      coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14, (ac_int< 1, false >)0);
    }
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1,
                            (ac_int< 1, false >)((scan_cg_last - i) == scan_cg_last || (scan_cg_last - i) == 0));

    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1, width);
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6, type);
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2, scan_mode);
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2, scan_cg_last - i);

    ac_int< 256, false > coeff_wide = coeff[cg_blk_pos];
    coeff_data_temp.set_slc(0, cg_blk_pos);
    ac_int< 15, false > abs_coeff[16];
    ac::init_array< AC_VAL_0 >(abs_coeff, 16);
    ac_int< 2, false > c1_array[16];
    ac::init_array< AC_VAL_0 >(c1_array, 16);

    ac_int< 5, false > count_not_zero = 0;
    ac_int< 16, false > coeff_signs = 0;

#pragma hls_unroll yes
  abs_coeff_not_zero_loop:
    for (ac_int< 5, false > aa = 0; aa < 16; aa++) {
      ac_int< 5, false > cg_coeff_pos = scan4[(ac_int< 4, false >)scan_pos_sig.slc< 4 >(0) - aa];

      coeff_t coeff_slice = (coeff_t)coeff_wide.slc< 16 >(16 * cg_coeff_pos);
      ac_int< 1, false > sig = coeff_slice != 0;
      ac_int< 15, false > abs_coeff_temp = Abs< 16 >(coeff_slice);

      if (scan_pos_sig - aa >= sub_pos && ((sig == 1) || (aa == 0 && scan_pos_sig == scan_pos_last))) {
        abs_coeff[aa] = abs_coeff_temp;
        coeff_data_temp.set_slc(7 + 15 * aa, abs_coeff_temp);
        coeff_data_temp.set_slc(7 + 15 * 16 + aa, (ac_int< 1, false >)1);
        count_not_zero++;
        coeff_signs = (coeff_signs << 1) + (coeff_slice[15]);
        c1_array[aa] = abs_coeff_temp == 1;
      }

      coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * aa, count_not_zero);

      ac_int< 6, false > pos_y = cg_coeff_pos.slc< 2 >(2) + (cg_blk_pos >> block_bits) * 4;
      ac_int< 6, false > pos_x = cg_coeff_pos.slc< 2 >(0) + (cg_blk_pos & (0xf >> (4 - block_bits))) * 4;

      coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + aa * 6, pos_y);
      coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + aa * 6, pos_x);
    }

    ac_int< 7, false > cg_pos_y = cg_blk_pos;
    ac_int< 7, false > cg_pos_x = 0;

    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16, coeff_signs);

    if (num_blk_side == 2) {
      cg_pos_y >>= 1;
      cg_pos_x = cg_blk_pos.slc< 1 >(0);
    } else if (num_blk_side == 4) {
      cg_pos_y >>= 2;
      cg_pos_x = cg_blk_pos.slc< 2 >(0);
    } else if (num_blk_side == 8) {
      cg_pos_y >>= 3;
      cg_pos_x = cg_blk_pos.slc< 3 >(0);
    }

    ac_int< 1, false > ctx_sig = 0;
    ac_int< 2, false > pattern_sig_ctx = 0;

    kvz_context(sig_coeffgroup_flag, cg_pos_x, cg_pos_y, width, pattern_sig_ctx, ctx_sig);

    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16, sig_coeffgroup_flag[cg_blk_pos] | ((scan_cg_last - i) == scan_cg_last || (scan_cg_last - i) == 0));
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1, ctx_sig);
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1, pattern_sig_ctx);

    // Calc index of first coeff 2 in CG
    ac_int< 5, false > go_rice_0 = min_idx_c2< 16 >(abs_coeff, 0);
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2, go_rice_0);

    ac_int< 5, false > minc2 = go_rice_0;
    // Calc index of last coeff 1 in CG
    ac_int< 5, false > maxc1 = max_idx< 16 >(c1_array, 0, 1);

    // Count coeff 1 calues in CG after first coeff 2 value
    ac_int< 5, false > c1_values = count_values_in_array< 16 >(c1_array, 0, 1, go_rice_0);
    // Count coeff 2 or greater calues in CG
    ac_int< 5, false > c2_or_greater_values = count_values_in_array< 16 >(c1_array, 0, 0, 16);

    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5, maxc1);
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5, c1_values);
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5, c2_or_greater_values);

    // Number of non zero values in CG
    ac_int< 5, false > num_non_zero = coeff_data_temp.slc< 5 >(7 + 15 * 16 + 16 + 5 * 15);

    ac_int< 5, false > num_c1_flag = num_non_zero < C1FLAG_NUMBER ? (ac_int< 5, false >)coeff_data_temp.slc< 5 >(7 + 15 * 16 + 16 + 5 * 15) : (ac_int< 5, false >)C1FLAG_NUMBER;

    ac_int< 6, true > first_c2_flag_idx = minc2;

    // Set c1_prev and first_c2_flag_idx values according to following if elses
    if (c2_or_greater_values == 0 || (c1_values >= num_c1_flag)) {
      first_c2_flag_idx = -1;
      if (num_non_zero > 3) {
        c1_prev = 3;
      } else {
        c1_prev = num_non_zero;
      }
    } else if (maxc1 < minc2) {

      first_c2_flag_idx = minc2;
      if (num_non_zero > 3) {
        c1_prev = 3;
      } else {
        c1_prev = num_non_zero;
      }
    } else {
      first_c2_flag_idx = minc2;
      c1_prev = 0;
    }

    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6, c1);

    if (num_non_zero > 0) {
      c1 = c1_prev;

      if (first_c2_flag_idx != -1 || c1_prev == 0) {
        c1 = 0;
      }
    }

    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7, first_c2_flag_idx);
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6 + 3, c1_prev);
    coeff_data_temp.set_slc(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6 + 3 + 3, c1);

    // Pingpong two kvz_encode_coeff_nxn_code blocks
    if (ping_pong == 0) {
      coeff_data.write(coeff_data_temp);
      ping_pong = 1;
    } else {
      coeff_data2.write(coeff_data_temp);
      ping_pong = 0;
    }

    if (scan_cg_last - i == 0)
      break;
  }
  // Signal next kvz_encode_coeff_nxn_code block to again signal arbiter to signal done bit and to retrun back waiting coeff_group_scanning
  if (ping_pong == 0) {
    coeff_data.write(0x7f);
    ping_pong = 1;
  } else {
    coeff_data2.write(0x7f);
    ping_pong = 0;
  }
}

// kvz_encode_coeff_nxn_code
#pragma design
void coeff_binarization(cabac_chan &cabac_write,
                        ac_channel< ac_int< 7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6 + 3 + 3 + 3 > > &coeff_data)

{
#ifndef __SYNTHESIS__
  while (coeff_data.available(1)) {
#endif
    ac_int< 6, false > width;
    ac_int< 2, false > type;
    ac_int< 2, false > scan_mode;

    ac_int< 4, false > block_bits = 0;
    ac_int< 4, false > num_blk_side = 1;
    ac_int< 3, false > log2_block_size = 2;

    // Read data from pre_calc
    ac_int< 7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6 + 3 + 3 + 3 > coeff_data_temp = coeff_data.read();

    // If pre_calc sends 0x7f, kvz_encode_coeff_nxn_code needs to send CMD_DONE_BIT to arbiter to signal coeff coding is done
    if ((ac_int< 7, false >)coeff_data_temp.slc< 7 >(0) == (ac_int< 7, false >)0x7f) {
      cabac_write.write(CMD_DONE_BIT);
    } else {
      width = coeff_data_temp.slc< 6 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1);
      type = coeff_data_temp.slc< 2 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6);
      scan_mode = coeff_data_temp.slc< 2 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2);

      if (width == 8) {
        block_bits = 1;
        log2_block_size = 3;
        // scan_cg_last_temp = 4;
        num_blk_side = 2;
      } else if (width == 16) {
        block_bits = 2;
        log2_block_size = 4;
        // scan_cg_last_temp = 16;
        num_blk_side = 4;
      } else if (width == 32) {
        block_bits = 3;
        log2_block_size = 5;
        // scan_cg_last_temp = 64;
        num_blk_side = 8;
      }

      ac_int< 11, false > sub_pos = 0;

      ac_int< 1, false > abs_offset = 0;
      ac_int< 14, true > scan_pos_sig = 0;

      // Parse data from coeff_data_temp to variables

      sub_pos = coeff_data_temp.slc< 11 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5);
      scan_pos_sig = coeff_data_temp.slc< 14 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11);
      abs_offset = coeff_data_temp.slc< 1 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14);
      ac_int< 1, false > coded_sub_block_flag = coeff_data_temp.slc< 1 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1);
      ac_int< 7, false > cg_pos_y;
      ac_int< 7, false > cg_pos_x = 0;

      ac_int< 15, false > abs_coeff[16];
      ac_int< 1, false > abs_coeff_not_zero[16];
      ac_int< 5, false > non_zeros_count_cache[16];
      ac_int< 5, false > go_rices_0;

      ac_int< 6, false > pos_x_array[16];
      ac_int< 6, false > pos_y_array[16];

      ac_int< 7, false > cg_blk_pos = coeff_data_temp.slc< 7 >(0);

#pragma hls_unroll yes
      for (ac_int< 5, false > cc = 0; cc < 16; cc++) {
        abs_coeff[cc] = coeff_data_temp.slc< 15 >(7 + 15 * cc);
        abs_coeff_not_zero[cc] = coeff_data_temp.slc< 1 >(7 + 15 * 16 + cc);
        non_zeros_count_cache[cc] = coeff_data_temp.slc< 5 >(7 + 15 * 16 + 16 + 5 * cc);
        pos_y_array[cc] = coeff_data_temp.slc< 6 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * cc);
        pos_x_array[cc] = coeff_data_temp.slc< 6 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * cc);
      }

      ac_int< 16, false > coeff_signs = coeff_data_temp.slc< 16 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16);
      ac_int< 1, false > sig_coeffgroup_flag = coeff_data_temp.slc< 1 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16);
      ac_int< 1, false > ctx_sig = coeff_data_temp.slc< 1 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1);
      ac_int< 2, false > pattern_sig_ctx = coeff_data_temp.slc< 2 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1);
      go_rices_0 = coeff_data_temp.slc< 5 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2);
      ac_int< 5, false > maxc1_temp = coeff_data_temp.slc< 5 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5);
      ac_int< 5, false > c1_values_temp = coeff_data_temp.slc< 5 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5);
      ac_int< 5, false > c2_or_greater_values_temp = coeff_data_temp.slc< 5 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5);

      ac_int< 7, true > scan_cg_last_count = coeff_data_temp.slc< 7 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2);
      ac_int< 6, true > first_c2_flag_idx = coeff_data_temp.slc< 6 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7);
      ac_int< 3, false > c1_last = coeff_data_temp.slc< 3 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6);
      ac_int< 3, false > c1_prev = coeff_data_temp.slc< 3 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6 + 3);
      ac_int< 3, false > c1 = coeff_data_temp.slc< 3 >(7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6 + 3 + 3);

      cg_pos_y = cg_blk_pos;

      if (num_blk_side == 2) {
        cg_pos_y >>= 1;
        cg_pos_x = cg_blk_pos.slc< 1 >(0);
      } else if (num_blk_side == 4) {
        cg_pos_y >>= 2;
        cg_pos_x = cg_blk_pos.slc< 2 >(0);
      } else if (num_blk_side == 8) {
        cg_pos_y >>= 3;
        cg_pos_x = cg_blk_pos.slc< 3 >(0);
      }

      ac_int< 14, true > last_nz_pos_in_cg = -1;
      ac_int< 5, false > num_non_zero = 0;
      ac_int< 1, false > num_non_zero_flag = 0;

      // ###############################################################################################
      //  Rest of the code is just comparing different values and coeffs to produce correct cabac writes
      // ###############################################################################################

      if (coded_sub_block_flag == 0) {
        ac_int< 1, false > sig_coeff_group = (sig_coeffgroup_flag != 0);

        cabac_val temp_cabac = cabac_param_to_val(sig_coeff_group, 0, 11, ctx_sig + type, CMD_ENCODE_BIN);
        cabac_write.write(temp_cabac);

#ifndef NO_PRINT
        printf("cur_ctx %d, index %d : ", 11, (ctx_sig + type).to_uint());
        printf("%d %s\n", sig_coeff_group.to_uint(), "coded_sub_block_flag");
#endif
      }

      ac_int< 5, false > minc2 = go_rices_0;
      ac_int< 5, false > maxc1 = maxc1_temp;

      ac_int< 5, false > c1_values = c1_values_temp;
      ac_int< 5, false > c2_or_greater_values = c2_or_greater_values_temp;

      num_non_zero = non_zeros_count_cache[15]; //
      ac_int< 5, false > num_c1_flag = num_non_zero < C1FLAG_NUMBER ? (int_16)num_non_zero : (int_16)C1FLAG_NUMBER;

      if (sig_coeffgroup_flag == 1) {
        if (scan_pos_sig >= sub_pos) {
          coeffs_func(abs_coeff_not_zero,
                      scan_pos_sig,
                      sub_pos,
                      block_bits,
                      non_zeros_count_cache,
                      (type == 0) ? 12 : 13,
                      type,
                      scan_mode,
                      scan_cg_last_count,
                      pattern_sig_ctx,
                      log2_block_size,
                      abs_offset,
                      pos_x_array,
                      pos_y_array,
                      cabac_write);
        }
      }

      if (num_non_zero > 0) {
        ac_int< 2, false > ctx_set = ((scan_cg_last_count) > 0 && type == 0) ? 2 : 0;

        ac_int< 6, false > base_ctx_mod_index_base;
        ac_int< 6, false > base_ctx_mod_index;
        ac_int< 7, false > base_ctx_mod;

        if (c1_last == 0) {
          ctx_set++;
        }

        base_ctx_mod = (type == 0) ? 18 : 19;

        if (num_c1_flag != 0) {
          abs_coeff_func(abs_coeff, abs_coeff_not_zero, non_zeros_count_cache, base_ctx_mod, ctx_set, num_c1_flag, minc2, cabac_write);
        }

        if (c1 == 0) {
          base_ctx_mod = (type == 0) ? 20 : 21;

          if (first_c2_flag_idx != -1) {
            ac_int< 1, false > symbol = (abs_coeff[first_c2_flag_idx] > 2) ? (ac_int< 1, false >)1 : (ac_int< 1, false >)0;

            cabac_val temp_cabac = cabac_param_to_val(symbol, 0, base_ctx_mod, ctx_set, CMD_ENCODE_BIN);
            cabac_write.write(temp_cabac);

#ifndef NO_PRINT
            printf("cur_ctx %d, index %d : ", (base_ctx_mod).to_uint(), (ctx_set).to_uint());
            printf("%d %s\n", symbol.to_uint(), "coeff_abs_level_greater2_flag");
#endif
          }
        }

        ac_int< 6, false > cur_ctx_index_temp = 0;

        if (c1 == 0) {
          cur_ctx_index_temp = ctx_set;
        } else if (num_c1_flag != 0) {
          cur_ctx_index_temp = 4 * ctx_set + c1_prev;
        }

        {
          cabac_val temp_cabac = cabac_param_to_val(coeff_signs, num_non_zero, base_ctx_mod, cur_ctx_index_temp, CMD_ENCODE_BINS_EP);
          cabac_write.write(temp_cabac);

#ifndef NO_PRINT
          printf("cur_ctx %d, index %d : ", (base_ctx_mod).to_uint(), (cur_ctx_index_temp).to_uint());
          printf("%d %d %s\n", coeff_signs.to_uint(), num_non_zero.to_uint(), "coeff_sign_flag");
#endif
        }

        if (c1 == 0 || num_non_zero > C1FLAG_NUMBER) {
          {
            non_zeros_func(abs_coeff, non_zeros_count_cache, go_rices_0, base_ctx_mod, cur_ctx_index_temp, cabac_write);
          }
        }
      }
      cabac_write.write(CMD_SKIP);
    }
#ifndef __SYNTHESIS__
  }
#endif
}

template < int num >
ac_int< 10, false > max_scan_pos(ac_int< 10, false > scan_pos_last_temp[4], ac_int< 10, false > scan_pos_last_orig_temp[4], ac_int< 10, false > &scan_pos_last_orig_t, ac_int< 2, false > index) {
  ac_int< 10, false > orig_t1;
  ac_int< 10, false > orig_t2;
  ac_int< 10, false > t1 = max_scan_pos< num / 2 >(scan_pos_last_temp, scan_pos_last_orig_temp, orig_t1, index);

  ac_int< 10, false > t2 = max_scan_pos< num - num / 2 >(scan_pos_last_temp, scan_pos_last_orig_temp, orig_t2, index + num / 2);

  ac_int< 10, false > ret_val = 0;

  if (t1 > t2) {
    scan_pos_last_orig_t = orig_t1;
    ret_val = t1;
  } else {
    scan_pos_last_orig_t = orig_t2;
    ret_val = t2;
  }
  return ret_val;
}

template <>
ac_int< 10, false > max_scan_pos< 1 >(ac_int< 10, false > scan_pos_last_temp[4], ac_int< 10, false > scan_pos_last_orig_temp[4], ac_int< 10, false > &scan_pos_last_orig_t, ac_int< 2, false > index) {
  scan_pos_last_orig_t = scan_pos_last_orig_temp[index];
  return scan_pos_last_temp[index];
}

void kvz_encode_coeff_nxn_cg(ac_channel< ac_int< 1 + 6 + 2 + 2 + 10 + 7 + 8 + 8 + 64 > > &encode_coeff_config, ac_int< 64, false > coeff[1024 / 4], ac_int< 6, false > width, ac_int< 2, false > type,
                             ac_int< 2, false > scan_mode, int_8 tr_skip, ac_channel< coeff_struct_wide > &coeff_s) {
  static ac_int< 1, false > pingpong = 0;

  ac_int< 1, false > sig_coeffgroup_flag[8 * 8];

  ac::init_array< AC_VAL_0 >(&sig_coeffgroup_flag[0], 8 * 8);

  coeff_struct_wide array_out;

  // CONSTANTS
  ac_int< 4, false > num_blk_side = 1;
  ac_int< 3, false > log2_block_size = 2;
  ac_int< 11, false > loop_limit = 16;

  ac_int< 11, false > coeff_scan_idx = 0;

  if (width == 8) {
    log2_block_size = 3;
    num_blk_side = 2;
    loop_limit = 64;
    coeff_scan_idx = 16;
  } else if (width == 16) {
    log2_block_size = 4;
    num_blk_side = 4;
    loop_limit = 256;
    coeff_scan_idx = 80;
  } else if (width == 32) {
    log2_block_size = 5;
    num_blk_side = 8;
    loop_limit = 1024;
    coeff_scan_idx = 336;
  }
  /*else if(width == 64)
  {
     log2_block_size = 6;
     scan_cg_last_temp = 256;
  }*/

  ac_int< 10, false > *coeff_indexes = &coeff_scan[coeff_scan_idx];

  ac_int< 10, false > *scan2 = &kvz_g_sig_last_scan2[kvz_g_sig_last_scan_idx[scan_mode][log2_block_size - 1]];
  ac_int< 7, false > *scan_cg2 = &g_sig_last_scan_cg2[g_sig_last_scan_cg2_idx[log2_block_size - 2][scan_mode]];

  ac_int< 7, false > scan_cg_last = 0;
  ac_int< 10, false > scan_pos_last = 0;
  ac_int< 10, false > scan_pos_orig_last = 0;
  ac_int< 5, false > scan_pos_cg_last = 0;

  ac_int< 7, false > scan_cg_last_temp[4] = {0, 0, 0, 0};
  ac_int< 10, false > scan_pos_last_temp[4] = {0, 0, 0, 0};
  ac_int< 10, false > scan_pos_last_orig[4] = {0, 0, 0, 0};

  ac_int< 256, false > coeff_p_temp = 0;

  ac_int< 3, false > save = 0;

// Loop for reading CGs (4x4) line by line
#pragma hls_pipeline_init_interval 1
  for (ac_int< 11, false > coeff_pos = 0; coeff_pos < 1024; coeff_pos += 4) {
    // Get CG line index
    ac_int< 10, false > coeff_index_temp = coeff_indexes[coeff_pos];
    // Read line
    ac_int< 64, false > coeff_p = coeff[coeff_index_temp >> 2];
    // CG pos div 16
    ac_int< 7, false > coeff_pos_shift = (coeff_pos) >> 4;
    coeff_p_temp.set_slc(64 * save, coeff_p);

    // Read all 4 lines before saving to CG memory array_out.coeff
    if (save == 3) {
      array_out.coeff[coeff_pos_shift + pingpong * 64] = coeff_p_temp;
      save = 0;
    } else {
      save++;
    }

    // Check if any coeff is non zero
    if (coeff_p != 0) {
      // Get CGs real index according to scan order
      ac_int< 7, false > scan_cg2_temp = scan_cg2[coeff_pos_shift];
      if (scan_cg_last < scan_cg2_temp) {
        scan_cg_last = scan_cg2_temp;
      }
      // Set flag
      sig_coeffgroup_flag[coeff_pos_shift] = 1;
    }

// Check all coeffs
#pragma hls_unroll yes
    for (int a = 0; a < 4; a++) {
      // If coeff is non zero
      if (coeff_p.slc< 16 >(16 * a)) {
        // Get coeffs real index according to scan order
        scan_pos_last_temp[a] = scan2[coeff_index_temp + a];
        scan_pos_last_orig[a] = coeff_index_temp + a;
      }
    }

    ac_int< 10, false > scan_pos_last_orig_t;
    // Parse max indexes
    ac_int< 14, true > scan_pos_last_t = max_scan_pos< 4 >(scan_pos_last_temp, scan_pos_last_orig, scan_pos_last_orig_t, 0);

    // Check if indexes are greater
    if (scan_pos_last < scan_pos_last_t) {
      scan_pos_last = scan_pos_last_t;
      scan_pos_orig_last = scan_pos_last_orig_t;
    }

    if (coeff_pos + 4 == loop_limit)
      break;
  }
  // printf("\n");

  // Set data for next block
  uint_8 last_coeff_x = scan_pos_orig_last & (width - 1);
  uint_8 last_coeff_y = (uint_8)(scan_pos_orig_last >> log2_block_size);

  ac_int< 1 + 6 + 2 + 2 + 10 + 7 + 8 + 8 + 64 > temp = 0;
  temp[0] = pingpong;
  temp.set_slc(1, width);
  temp.set_slc(1 + 6, type);
  temp.set_slc(1 + 6 + 2, scan_mode);
  temp.set_slc(1 + 6 + 2 + 2, scan_pos_last);
  temp.set_slc(1 + 6 + 2 + 2 + 10, scan_cg_last);
  temp.set_slc(1 + 6 + 2 + 2 + 10 + 7, last_coeff_x);
  temp.set_slc(1 + 6 + 2 + 2 + 10 + 7 + 8, last_coeff_y);

#pragma hls_unroll yes
  for (int a = 0; a < 64; a++) {
    temp.set_slc(1 + 6 + 2 + 2 + 10 + 7 + 8 + 8 + a, sig_coeffgroup_flag[a]);
  }

  encode_coeff_config.write(temp);
  coeff_s.write(array_out);

  // Change pingpong bit for pipelined memory writes
  if (pingpong == 0) {
    pingpong = 1;
  } else {
    pingpong = 0;
  }
}

#define ACC_LCU_GET_CU_AT_PX(cu, x_px, y_px) ((cu)[((x_px) >> 2) + ((y_px) >> 2) * LCU_CU_WIDTH])

const ac_int< 13, false > coeff_offset[3] = {0, LCU_LUMA_SIZE, LCU_LUMA_SIZE + LCU_CHROMA_SIZE};

// Coeff coding first block
#pragma design
void coeff_group_arranging(ac_channel< ac_int< 32 + 16 + 16 + 8 + 2 + 5, false > > &conf_in, ac_int< 64, false > coeff[((LCU_LUMA_SIZE + LCU_CHROMA_SIZE + LCU_CHROMA_SIZE) / 4) * LCU_COUNT],
                           ac_channel< ac_int< 1 + 6 + 2 + 2 + 10 + 7 + 8 + 8 + 64 > > &encode_coeff_config, ac_channel< coeff_struct_wide > &coeff_s) {
  ac_int< 32, false > cur_pu;
  ac_int< 16, false > x;
  ac_int< 16, false > y;
  uint_8 depth;
  ac_int< 2, false > color;
  ac_int< 1, false > start = 0;

  ac_int< 32 + 16 + 16 + 8 + 2 + 5, false > conf_temp;

  conf_temp = conf_in.read();
  cur_pu = conf_temp.slc< 32 >(0);

  x = conf_temp.slc< 16 >(32);
  y = conf_temp.slc< 16 >(32 + 16);

  depth = conf_temp.slc< 8 >(32 + 16 + 16);
  color = conf_temp.slc< 2 >(32 + 16 + 16 + 8);
  ac_int< 5, false > ctu_id = conf_temp.slc< 5 >(32 + 16 + 16 + 8 + 2);

  uint_8 width = LCU_WIDTH >> depth;
  uint_8 width_c = (depth == MAX_PU_DEPTH ? (uint_8)width : (uint_8)(width / 2));

  ac_int< 2, false > scan_idx = kvz_get_scan_order(CU_INTRA, cu_get_mode(cur_pu), cu_get_depth(cur_pu));

  ac_int< 6, false > x_local = color == 0 ? (ac_int< 6, false >)x.slc< 6 >(0) : (ac_int< 6, false >)x.slc< 5 >(1);
  ac_int< 6, false > y_local = color == 0 ? (ac_int< 6, false >)y.slc< 6 >(0) : (ac_int< 6, false >)y.slc< 5 >(1);

  ac_int< 13, false > coeff_index = xy_to_zorder(LCU_WIDTH, x_local, y_local) + coeff_offset[color];

  ac_int< 6, false > width_in = color == 0 ? width : width_c;
  ac_int< 2, false > type_in = color == 0 ? 0 : 2;

  { kvz_encode_coeff_nxn_cg(encode_coeff_config, &coeff[(coeff_index >> 2) + ((LCU_LUMA_SIZE + LCU_CHROMA_SIZE + LCU_CHROMA_SIZE) / 4) * ctu_id], width_in, type_in, scan_idx, 0, coeff_s); }
}

// Simple clock crossing component
void coeff_coding_done_dc(ac_channel< ac_int< 1, false > > &done_in, ac_channel< ac_int< 1, false > > &done) {
#ifndef __SYNTHESIS__
  while (done_in.available(1)) {
#endif

    ac_int< 1, false > temp = done_in.read();
    done.write(temp);

#ifndef __SYNTHESIS__
  }
#endif
}

// coeff_group_scanning and multi kvz_encode_coeff_nxn_code cabac_write arbiter
void arbiter_hier(cabac_chan &cabac_write1, cabac_chan &cabac_write2, cabac_chan &cabac_write3, cabac_chan &cabac_write_out, ac_channel< ac_int< 1, false > > &done) {
#ifndef __SYNTHESIS__
  while (cabac_write1.available(1) || cabac_write2.available(1)) {
#endif

    static ac_int< 2, false > read_chan = 0;
    cabac_val temp = 0;
    // Check where to read from
    if (read_chan == 0) {
      temp = cabac_write1.read();
    } else if (read_chan == 1) {
      temp = cabac_write2.read();
    } else if (read_chan == 2) {
      temp = cabac_write3.read();
    }

    // Check CMD_SKIP from kvz_encode_coeff_nxn_code writes to signal channel change
    if (temp == CMD_SKIP) {
      if (read_chan == 1) {
        read_chan = 2;
      } else {
        read_chan = 1;
      }
    }
    // Check CMD_DONE_BIT from coeff_group_scanning and from any kvz_encode_coeff_nxn_code to start reading from kvz_encode_coeff_nxn_code blocks or to signal done_bit
    else if (temp == CMD_DONE_BIT) {
      if (read_chan != 0) {
        read_chan = 0;
        done.write(1);
      } else {
        read_chan = 1;
      }
    } else {
      cabac_write_out.write(temp);
    }

#ifndef __SYNTHESIS__
  }
#endif
}

void cabac_main(ac_channel< ac_int< 32 + 16 + 16 + 8 + 2 + 5, false > > &conf_in, ac_int< 64, false > coeff[((LCU_LUMA_SIZE + LCU_CHROMA_SIZE + LCU_CHROMA_SIZE) / 4) * LCU_COUNT],
                cabac_chan &cabac_write, ac_channel< ac_int< 1, false > > &done) {
  static ac_channel< ac_int< 1 + 6 + 2 + 2 + 10 + 7 + 8 + 8 + 64 > > encode_coeff_config;
  static ac_channel< ac_int< 1 + 6 + 2 + 2 + 10 + 7 + 8 + 8 + 64 > > encode_coeff_config2;
  static ac_channel< ac_int< 7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6 + 3 + 3 + 3 > > coeff_data;
  static ac_channel< ac_int< 7 + 15 * 16 + 16 + 5 * 16 + 6 * 16 + 6 * 16 + 16 + 1 + 1 + 2 + 5 + 5 + 5 + 5 + 11 + 14 + 1 + 1 + 6 + 2 + 2 + 7 + 6 + 3 + 3 + 3 > > coeff_data2;
  static ac_channel< coeff_struct_wide > coeff_s;
  static ac_channel< ac_int< CABAC_VAL_WIDTH, false > > cabac_write_wide_hier;
  static ac_channel< ac_int< CABAC_VAL_WIDTH, false > > cabac_write_wide_hier2;

  static ac_channel< ac_int< CABAC_VAL_WIDTH, false > > cabac_write_wide_hier3;
  static cabac_chan cabac_write_hier;
  static cabac_chan cabac_write_hier2;
  static cabac_chan cabac_write_hier3;
  static ac_channel< ac_int< 1, false > > done_hier;

  coeff_group_arranging(conf_in, coeff, encode_coeff_config, coeff_s);
  coeff_group_scanning(cabac_write_hier, encode_coeff_config, coeff_s, coeff_data, coeff_data2);
  coeff_binarization(cabac_write_hier2, coeff_data);
  coeff_binarization(cabac_write_hier3, coeff_data2);
  arbiter_hier(cabac_write_hier, cabac_write_hier2, cabac_write_hier3, cabac_write, done_hier);
  coeff_coding_done_dc(done_hier, done);
}

void arbiter(cabac_chan &cabac_write1, cabac_chan &cabac_write2, cabac_chan &cabac_write3, cabac_chan &cabac_write_out, ac_channel< ac_int< 1, false > > &done) {
  static ac_channel< ac_int< 1, false > > done_hier;

  arbiter_hier(cabac_write1, cabac_write2, cabac_write3, cabac_write_out, done_hier);
  coeff_coding_done_dc(done_hier, done);
}
